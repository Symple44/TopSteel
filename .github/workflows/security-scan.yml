name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

env:
  NODE_VERSION: '22.12.0'
  PNPM_VERSION: '10.13.1'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm ci:install

      - name: Run npm audit
        run: |
          echo "🔒 Running npm audit..."
          pnpm audit --audit-level moderate --json > audit-results.json || true
          echo "✅ npm audit completed"

      - name: Run audit-ci
        run: |
          echo "🔍 Running audit-ci..."
          npx audit-ci --config audit-ci.json --report-type json --output-format json > audit-ci-results.json || true
          echo "✅ audit-ci completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            audit-results.json
            audit-ci-results.json
          retention-days: 30

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm ci:install

      - name: Check for outdated packages
        run: |
          echo "📦 Checking for outdated packages..."
          pnpm outdated --format json > outdated-packages.json || true
          echo "✅ Outdated packages check completed"

      - name: Run better-npm-audit
        run: |
          echo "🔍 Running better-npm-audit..."
          npx better-npm-audit audit --level moderate --json > better-audit-results.json || true
          echo "✅ better-npm-audit completed"

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports-${{ github.run_number }}
          path: |
            outdated-packages.json
            better-audit-results.json
          retention-days: 30

  code-scanning:
    name: Code Scanning with CodeQL
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm ci:install

      - name: Build for analysis
        run: |
          pnpm build:packages
          cd apps/api && pnpm build
          cd ../web && pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Run TruffleHog
        run: |
          echo "🔍 Scanning for secrets..."
          trufflehog git file://. --format json --output secrets-scan-results.json || true
          echo "✅ Secrets scan completed"

      - name: Check for secrets
        run: |
          if [ -f "secrets-scan-results.json" ] && [ -s "secrets-scan-results.json" ]; then
            echo "⚠️ Potential secrets found!"
            cat secrets-scan-results.json
            exit 1
          else
            echo "✅ No secrets detected"
          fi

      - name: Upload secrets scan results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-results-${{ github.run_number }}
          path: secrets-scan-results.json
          retention-days: 30

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 25

    strategy:
      matrix:
        dockerfile: [Dockerfile.api, Dockerfile.web, Dockerfile.marketplace-api, Dockerfile.marketplace-storefront]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -f ${{ matrix.dockerfile }} -t security-test:latest .

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Trivy vulnerability scanner
        run: |
          echo "🔍 Scanning Docker image for vulnerabilities..."
          trivy image --format json --output trivy-results-${{ matrix.dockerfile }}.json security-test:latest || true
          echo "✅ Trivy scan completed"

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-${{ matrix.dockerfile }}-${{ github.run_number }}
          path: trivy-results-${{ matrix.dockerfile }}.json
          retention-days: 30

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm ci:install

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          echo "📄 Checking license compliance..."
          license-checker --json --out license-report.json --exclude 'MIT,Apache-2.0,BSD-2-Clause,BSD-3-Clause,ISC,CC0-1.0' || true
          echo "✅ License check completed"

      - name: Review license report
        run: |
          if [ -f "license-report.json" ] && [ -s "license-report.json" ]; then
            echo "⚠️ Some packages may have incompatible licenses"
            cat license-report.json
          else
            echo "✅ All licenses are compatible"
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report-${{ github.run_number }}
          path: license-report.json
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-check, code-scanning, secrets-scan, docker-security, license-check]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Scanning | ${{ needs.code-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Security | ${{ needs.docker-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan completed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Create security issue if failures
        if: needs.security-audit.result == 'failure' || needs.dependency-check.result == 'failure' || needs.secrets-scan.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Security Scan Failures - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Failures Detected
            
            **Run ID:** ${{ github.run_id }}
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref_name }}
            
            ### Failed Checks:
            - Security Audit: ${{ needs.security-audit.result }}
            - Dependency Check: ${{ needs.dependency-check.result }}
            - Secrets Scan: ${{ needs.secrets-scan.result }}
            
            Please review the security scan results and address any issues.
            
            [View Run Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'urgent']
            });