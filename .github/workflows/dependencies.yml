# .github/workflows/dependencies.yml
# Surveillance automatique des dépendances et sécurité

name: 📦 Dependencies & Security Monitor

on:
  schedule:
    - cron: "0 6 * * 1" # Tous les lundis à 6h UTC
    - cron: "0 18 * * 5" # Tous les vendredis à 18h UTC
  push:
    branches: [main, develop]
    paths:
      - "**/package.json"
      - "pnpm-lock.yaml"
  pull_request:
    branches: [main]
    paths:
      - "**/package.json"
      - "pnpm-lock.yaml"
  workflow_dispatch:
    inputs:
      create_pr:
        description: "Create PR for updates"
        required: false
        default: "false"
        type: boolean
permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  NODE_VERSION: "22.14.0"
  PNPM_VERSION: "10.13.1"

jobs:
  # 🔍 Audit de sécurité avancé
  security-audit:
    name: 🛡️ Advanced Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 pnpm security audit
        run: |
          echo "🔍 Running pnpm security audit..."
          pnpm audit --audit-level moderate --json > pnpm-audit.json || true

          # Afficher le résumé
          if [ -s pnpm-audit.json ]; then
            echo "⚠️ Vulnerabilities found in pnpm audit"
            cat pnpm-audit.json | jq '.metadata.vulnerabilities' || echo "No detailed vulnerability info"
          else
            echo "✅ No vulnerabilities found in pnpm audit"
          fi

      - name: 🔐 audit-ci strict check
        run: |
          echo "🔐 Running audit-ci strict check..."
          pnpm dlx audit-ci --config audit-ci.json

      - name: 🔍 Check for unused dependencies
        run: |
          echo "🔍 Checking for unused dependencies..."
          pnpm dlx depcheck --json > depcheck-results.json || true

          # Analyser les résultats
          if [ -s depcheck-results.json ]; then
            echo "📊 Depcheck results:"
            cat depcheck-results.json | jq '.dependencies // empty' || echo "No unused dependencies"
          fi

      - name: 🔎 Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=medium --json > snyk-results.json

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            pnpm-audit.json
            depcheck-results.json
            snyk-results.json
          retention-days: 30

  # 📊 Analyse des dépendances obsolètes
  outdated-analysis:
    name: 📊 Outdated Dependencies Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📊 Check outdated packages
        run: |
          echo "📊 Checking for outdated packages..."
          pnpm outdated --recursive --format list > outdated-packages.txt || true

          if [ -s outdated-packages.txt ]; then
            echo "📦 Outdated packages found:"
            cat outdated-packages.txt
            echo "outdated_found=true" >> $GITHUB_ENV
          else
            echo "✅ All packages are up to date"
            echo "outdated_found=false" >> $GITHUB_ENV
          fi

      - name: 🔍 Detailed dependency analysis
        run: |
          echo "🔍 Running detailed dependency analysis..."

          # Analyser les vulnérabilités par niveau de sévérité
          echo "## 📊 Dependency Analysis Report" > dependency-report.md
          echo "Generated on: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md

          # Packages outdated
          if [ -s outdated-packages.txt ]; then
            echo "### 📦 Outdated Packages" >> dependency-report.md
            echo "\`\`\`" >> dependency-report.md
            cat outdated-packages.txt >> dependency-report.md
            echo "\`\`\`" >> dependency-report.md
          else
            echo "### ✅ All packages up to date" >> dependency-report.md
          fi

      - name: 🎯 npm-check-updates analysis
        run: |
          echo "🎯 Running npm-check-updates analysis..."
          npx npm-check-updates --format group --target minor > ncu-analysis.txt || true

          if [ -s ncu-analysis.txt ]; then
            echo "" >> dependency-report.md
            echo "### 🎯 NCU Analysis (Minor Updates)" >> dependency-report.md
            echo "\`\`\`" >> dependency-report.md
            cat ncu-analysis.txt >> dependency-report.md
            echo "\`\`\`" >> dependency-report.md
          fi

      - name: 📤 Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            outdated-packages.txt
            ncu-analysis.txt
            dependency-report.md
          retention-days: 30

      - name: 🚨 Create issue if critical updates needed
        if: env.outdated_found == 'true' && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let reportContent = "# 📦 Weekly Dependencies Report\n\n";
            reportContent += "Des dépendances obsolètes ont été détectées.\n\n";

            try {
              const outdated = fs.readFileSync('outdated-packages.txt', 'utf8');
              reportContent += "## 📊 Packages obsolètes\n\n";
              reportContent += "```\n" + outdated + "\n```\n\n";
            } catch (e) {
              console.log('No outdated packages file found');
            }

            reportContent += "## 🎯 Actions recommandées\n\n";
            reportContent += "1. Vérifier les breaking changes des nouvelles versions\n";
            reportContent += "2. Exécuter `pnpm update --latest` pour les mises à jour mineures\n";
            reportContent += "3. Tester en local avant de merger\n";
            reportContent += "4. Planifier les mises à jour majeures\n\n";
            reportContent += "---\n";
            reportContent += "Généré automatiquement par GitHub Actions";

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📦 Dependencies Update Required - ${new Date().toISOString().split('T')[0]}`,
              body: reportContent,
              labels: ['dependencies', 'maintenance', 'automated']
            });

  # 🔄 Mise à jour automatique (optionnelle)
  auto-update:
    name: 🔄 Auto Update Dependencies
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_pr == 'true' || (github.event_name == 'schedule' && github.ref == 'refs/heads/develop') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔄 Update patch and minor versions
        run: |
          echo "🔄 Updating patch and minor versions..."

          # Sauvegarder l'état actuel
          cp pnpm-lock.yaml pnpm-lock.yaml.backup

          # Mettre à jour les versions patch/minor
          pnpm update --latest

          # Vérifier s'il y a des changements
          if ! git diff --quiet pnpm-lock.yaml; then
            echo "changes_detected=true" >> $GITHUB_ENV
            echo "✅ Dependencies updated"
          else
            echo "changes_detected=false" >> $GITHUB_ENV
            echo "ℹ️ No updates available"
          fi

      - name: 🧪 Run quick validation
        if: env.changes_detected == 'true'
        run: |
          echo "🧪 Running quick validation after updates..."

          # Tests rapides pour valider les mises à jour
          pnpm install
          pnpm type-check || exit 1
          pnpm audit --audit-level moderate || exit 1

          echo "✅ Quick validation passed"

      - name: 📝 Create Pull Request
        if: env.changes_detected == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🔄 chore: auto-update dependencies

            - Updated patch and minor versions
            - All security audits passing
            - Quick validation completed
          title: "🔄 Auto-update dependencies"
          body: |
            ## 📦 Automatic Dependencies Update

            Cette PR contient les mises à jour automatiques des dépendances :

            ### ✅ Validations effectuées
            - [x] Type checking
            - [x] Security audit
            - [x] Basic functionality tests

            ### 🎯 Actions recommandées
            - [ ] Vérifier les changements manuellement
            - [ ] Exécuter la suite de tests complète
            - [ ] Tester en local si nécessaire

            ---
            🤖 Générée automatiquement par GitHub Actions
          branch: auto-update/dependencies
          labels: |
            dependencies
            automated
            maintenance

  # 📊 Rapport hebdomadaire
  weekly-report:
    name: 📊 Weekly Security Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [security-audit, outdated-analysis]

    steps:
      - name: 📥 Download reports
        uses: actions/download-artifact@v5
        with:
          pattern: "*-reports"
          merge-multiple: true

      - name: 📊 Generate weekly summary
        run: |
          echo "# 📊 Weekly Security & Dependencies Report" > weekly-report.md
          echo "Generated on: $(date)" >> weekly-report.md
          echo "" >> weekly-report.md

          echo "## 🛡️ Security Status" >> weekly-report.md
          if [ -f pnpm-audit.json ] && [ -s pnpm-audit.json ]; then
            echo "⚠️ Some security issues detected" >> weekly-report.md
          else
            echo "✅ No security vulnerabilities found" >> weekly-report.md
          fi

          echo "" >> weekly-report.md
          echo "## 📦 Dependencies Status" >> weekly-report.md
          if [ -f outdated-packages.txt ] && [ -s outdated-packages.txt ]; then
            echo "📊 Some packages need updates" >> weekly-report.md
          else
            echo "✅ All dependencies up to date" >> weekly-report.md
          fi

          echo "" >> weekly-report.md
          echo "---" >> weekly-report.md
          echo "🤖 Automated report by TopSteel CI/CD" >> weekly-report.md

      - name: 📤 Upload weekly report
        uses: actions/upload-artifact@v4
        with:
          name: weekly-security-report
          path: weekly-report.md
          retention-days: 90
