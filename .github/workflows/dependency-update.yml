name: Dependency Updates

on:
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday at 6 AM
  workflow_dispatch:

env:
  NODE_VERSION: '22.14.0'
  PNPM_VERSION: '10.13.1'

jobs:
  dependency-check:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm ci:install

      - name: Check for outdated packages
        run: |
          echo "📦 Checking for outdated packages..."
          pnpm outdated --format json > outdated-packages.json || true
          
          # Create a summary
          echo "# Dependency Update Report" > dependency-update-report.md
          echo "" >> dependency-update-report.md
          echo "Generated at: $(date)" >> dependency-update-report.md
          echo "" >> dependency-update-report.md
          
          if [ -s "outdated-packages.json" ]; then
            echo "## Outdated Packages Found" >> dependency-update-report.md
            echo "" >> dependency-update-report.md
            echo "The following packages have updates available:" >> dependency-update-report.md
            echo "" >> dependency-update-report.md
            
            # Parse and format the outdated packages
            jq -r 'to_entries[] | "- **\(.key)**: \(.value.current) → \(.value.latest)"' outdated-packages.json >> dependency-update-report.md 2>/dev/null || echo "Error parsing outdated packages" >> dependency-update-report.md
          else
            echo "## All Dependencies Up to Date" >> dependency-update-report.md
            echo "" >> dependency-update-report.md
            echo "✅ No outdated packages found!" >> dependency-update-report.md
          fi

      - name: Check for security vulnerabilities
        run: |
          echo "🔒 Checking for security vulnerabilities..."
          pnpm audit --audit-level moderate --json > security-audit.json || true
          
          echo "" >> dependency-update-report.md
          echo "## Security Audit" >> dependency-update-report.md
          echo "" >> dependency-update-report.md
          
          if [ -s "security-audit.json" ]; then
            vulnerabilities=$(jq '.metadata.vulnerabilities.total // 0' security-audit.json 2>/dev/null || echo "0")
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "⚠️ Found $vulnerabilities security vulnerabilities" >> dependency-update-report.md
            else
              echo "✅ No security vulnerabilities found" >> dependency-update-report.md
            fi
          else
            echo "✅ No security vulnerabilities found" >> dependency-update-report.md
          fi

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports-${{ github.run_number }}
          path: |
            outdated-packages.json
            security-audit.json
            dependency-update-report.md
          retention-days: 30

      - name: Create update issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = fs.readFileSync('dependency-update-report.md', 'utf8');
              const outdated = fs.readFileSync('outdated-packages.json', 'utf8');
              
              let hasUpdates = false;
              if (outdated.trim() && outdated !== '{}') {
                hasUpdates = true;
              }
              
              if (hasUpdates) {
                const title = `Weekly Dependency Updates - ${new Date().toISOString().split('T')[0]}`;
                const body = `
            ${report}
            
            ## Recommended Actions
            
            1. Review the outdated packages listed above
            2. Test updates in a feature branch
            3. Update packages incrementally to avoid breaking changes
            4. Run the full test suite after updates
            
            ## Commands to Update
            
            \`\`\`bash
            # Update all packages (use with caution)
            pnpm update
            
            # Update specific package
            pnpm update <package-name>
            
            # Update to latest (including major versions)
            pnpm update --latest
            \`\`\`
            
            **Generated by:** GitHub Actions
            **Run ID:** ${{ github.run_id }}
                `;
                
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['dependencies', 'maintenance']
                });
              }
            } catch (error) {
              console.log('No dependency updates needed or error reading files');
            }

  automated-updates:
    name: Automated Minor Updates
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm ci:install

      - name: Update minor and patch versions
        run: |
          echo "🔄 Updating minor and patch versions..."
          
          # Create a new branch for updates
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          branch_name="automated-dependency-updates-$(date +%Y%m%d)"
          git checkout -b "$branch_name"
          
          # Update packages (excluding major versions)
          pnpm update --recursive
          
          # Check if there are changes
          if git diff --quiet package.json apps/*/package.json; then
            echo "No updates available"
            exit 0
          fi
          
          # Commit changes
          git add .
          git commit -m "chore: automated dependency updates

          - Update minor and patch versions
          - Automated by GitHub Actions

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # Push the branch
          git push origin "$branch_name"
          
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV

      - name: Run tests on updated dependencies
        run: |
          if [ -n "$BRANCH_NAME" ]; then
            echo "🧪 Running tests with updated dependencies..."
            pnpm build:packages
            pnpm test || echo "Tests failed - will mention in PR"
          fi

      - name: Create Pull Request
        if: env.BRANCH_NAME
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            
            if (!branchName) {
              console.log('No updates were made');
              return;
            }
            
            const title = `chore: automated dependency updates (${new Date().toISOString().split('T')[0]})`;
            const body = `
            ## Automated Dependency Updates
            
            This PR contains automated updates for minor and patch versions of dependencies.
            
            ### Changes Made
            - Updated all minor and patch versions
            - Maintained compatibility with existing code
            - No breaking changes expected
            
            ### Testing
            - [x] Dependencies installed successfully
            - [x] Build completed without errors
            - [ ] All tests passing (please verify)
            
            ### Review Checklist
            - [ ] Check for any breaking changes in changelogs
            - [ ] Verify all tests are passing
            - [ ] Test critical application flows
            - [ ] Review any new security advisories
            
            **Generated by:** GitHub Actions Automated Updates
            **Branch:** ${branchName}
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            `;
            
            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                head: branchName,
                base: 'main',
                body: body
              });
              
              console.log(`Created PR #${pr.data.number}: ${pr.data.html_url}`);
              
              // Add labels
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['dependencies', 'automated', 'maintenance']
              });
              
            } catch (error) {
              console.error('Error creating PR:', error);
            }

  critical-security-updates:
    name: Critical Security Updates
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm ci:install

      - name: Check for critical security vulnerabilities
        run: |
          echo "🔒 Checking for critical security vulnerabilities..."
          pnpm audit --audit-level high --json > critical-audit.json || true
          
          critical_count=$(jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' critical-audit.json 2>/dev/null || echo "0")
          
          if [ "$critical_count" -gt 0 ]; then
            echo "⚠️ Found $critical_count critical/high severity vulnerabilities"
            echo "CRITICAL_VULNERABILITIES=true" >> $GITHUB_ENV
            echo "VULN_COUNT=$critical_count" >> $GITHUB_ENV
          else
            echo "✅ No critical vulnerabilities found"
            echo "CRITICAL_VULNERABILITIES=false" >> $GITHUB_ENV
          fi

      - name: Apply security fixes
        if: env.CRITICAL_VULNERABILITIES == 'true'
        run: |
          echo "🔧 Applying security fixes..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          branch_name="security-fixes-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$branch_name"
          
          # Apply audit fix
          pnpm audit fix || true
          
          # Check if there are changes
          if git diff --quiet; then
            echo "No fixes were applied automatically"
            exit 0
          fi
          
          # Commit changes
          git add .
          git commit -m "security: apply critical security fixes

          - Fix ${{ env.VULN_COUNT }} critical/high severity vulnerabilities
          - Automated security update by GitHub Actions

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git push origin "$branch_name"
          echo "SECURITY_BRANCH=$branch_name" >> $GITHUB_ENV

      - name: Create urgent security PR
        if: env.SECURITY_BRANCH
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.SECURITY_BRANCH;
            const vulnCount = process.env.VULN_COUNT;
            
            const title = `🚨 URGENT: Security fixes for ${vulnCount} critical vulnerabilities`;
            const body = `
            ## 🚨 Critical Security Update
            
            **URGENT:** This PR addresses ${vulnCount} critical or high severity security vulnerabilities.
            
            ### Security Issues Fixed
            - **Severity:** Critical/High
            - **Count:** ${vulnCount} vulnerabilities
            - **Action:** Automated security fixes applied
            
            ### Immediate Actions Required
            1. ⚠️ **REVIEW IMMEDIATELY** - This is a security-critical update
            2. 🧪 **TEST THOROUGHLY** - Verify application functionality
            3. 🚀 **DEPLOY ASAP** - Merge and deploy to production immediately
            4. 📋 **DOCUMENT** - Record security incident if needed
            
            ### Testing Checklist
            - [ ] Application starts without errors
            - [ ] Critical user flows work correctly
            - [ ] Authentication systems function properly
            - [ ] No breaking changes introduced
            
            **⏰ This PR should be reviewed and merged as soon as possible.**
            
            **Generated by:** GitHub Actions Security Monitor
            **Branch:** ${branchName}
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            `;
            
            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                head: branchName,
                base: 'main',
                body: body
              });
              
              // Add urgent labels
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['security', 'urgent', 'critical', 'automated']
              });
              
              // Request review from team
              try {
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.data.number,
                  team_reviewers: ['security-team'] // Adjust team name as needed
                });
              } catch (error) {
                console.log('Could not request team review (team may not exist)');
              }
              
              console.log(`🚨 Created URGENT security PR #${pr.data.number}: ${pr.data.html_url}`);
              
            } catch (error) {
              console.error('Error creating security PR:', error);
            }