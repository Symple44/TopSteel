name: 🧪 Test Suite

on:
  push:
    branches: [main, develop, 'feature/**', 'fix/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      coverage:
        description: 'Generate coverage report'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '22.14.0'
  PNPM_VERSION: '10.13.1'
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # Tests unitaires
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - { name: 'API', path: 'apps/api', command: 'test:unit' }
          - { name: 'Web', path: 'apps/web', command: 'test' }
          - { name: 'UI Components', path: 'packages/ui', command: 'test' }
          - { name: 'Domains', path: 'packages/domains', command: 'test' }
          - { name: 'Utils', path: 'packages/utils', command: 'test' }
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🧪 Run ${{ matrix.package.name }} tests
        working-directory: ${{ matrix.package.path }}
        run: pnpm ${{ matrix.package.command }}
      
      - name: 📊 Upload coverage
        if: github.event.inputs.coverage == 'true' || github.event_name == 'push'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ matrix.package.path }}/coverage/lcov.info
          flags: ${{ matrix.package.name }}
          name: ${{ matrix.package.name }}-coverage

  # Tests d'intégration
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: erp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🏗️ Build packages
        run: pnpm build:packages
      
      - name: 🗄️ Setup database
        run: |
          cd apps/api
          pnpm db:test:setup
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/erp_test
          REDIS_URL: redis://localhost:6379
      
      - name: 🔗 Run tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/erp_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
      
      - name: 📊 Upload coverage
        if: github.event.inputs.coverage == 'true' || github.event_name == 'push'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: integration
          name: integration-coverage

  # Tests E2E
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🏗️ Build application
        run: pnpm build
        env:
          NODE_ENV: test
      
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
      
      - name: 🎭 Run E2E tests
        run: pnpm test:e2e
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3005
          CI: true
      
      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Tests de performance
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🏗️ Build for production
        run: pnpm build
        env:
          NODE_ENV: production
      
      - name: ⚡ Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: 📊 Bundle size check
        run: |
          echo "## 📦 Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Analyser la taille des bundles
          du -sh apps/web/.next | awk '{print "| Web App | " $1 " | - |"}' >> $GITHUB_STEP_SUMMARY
          du -sh apps/api/dist | awk '{print "| API | " $1 " | - |"}' >> $GITHUB_STEP_SUMMARY

  # Rapport de test
  test-report:
    name: 📊 Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: 📊 Generate test summary
        run: |
          echo "# 🧪 Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🎭 E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "## ✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 💬 Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const unitStatus = '${{ needs.unit-tests.result }}' === 'success' ? '✅' : '❌';
            const integrationStatus = '${{ needs.integration-tests.result }}' === 'success' ? '✅' : '❌';
            const e2eStatus = '${{ needs.e2e-tests.result }}' === 'success' ? '✅' : '❌';
            
            const body = `## 🧪 Test Results
            
            | Test Type | Status |
            |-----------|--------|
            | Unit Tests | ${unitStatus} |
            | Integration Tests | ${integrationStatus} |
            | E2E Tests | ${e2eStatus} |
            
            [View detailed results →](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });