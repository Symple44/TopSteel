# .github/workflows/ci.yml
# CI/CD Pipeline optimisé pour TopSteel ERP
# Version post-corrections de sécurité

name: 🚀 TopSteel CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "20.18.0"
  PNPM_VERSION: "8.15.0"
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/erp_test
  REDIS_URL: redis://localhost:6379

# Annuler les workflows précédents pour la même branche
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔧 Job 1: Configuration et installation des dépendances
  setup:
    name: 📦 Setup & Dependencies
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      node-version: ${{ env.NODE_VERSION }}
      pnpm-version: ${{ env.PNPM_VERSION }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          registry-url: 'https://registry.npmjs.org'

      - name: 🗂️ Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: ⚡ Setup pnpm cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            .turbo
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-pnpm-

      - name: 📥 Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "🔄 Installing dependencies..."
          pnpm install --frozen-lockfile --prefer-offline
          echo "✅ Dependencies installed successfully"

      - name: 📋 Environment info
        run: |
          echo "Node.js version: $(node --version)"
          echo "pnpm version: $(pnpm --version)"
          echo "Turbo version: $(pnpm turbo --version)"

  # 🔍 Job 2: Analyse de la qualité du code
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ !github.event.pull_request.draft }}
    
    strategy:
      fail-fast: false
      matrix:
        check: 
          - { name: "lint", command: "lint", emoji: "🔍" }
          - { name: "type-check", command: "type-check", emoji: "📝" }
          - { name: "format", command: "format", emoji: "✨" }

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: "pnpm"

      - name: ⚡ Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            .turbo
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: ${{ matrix.check.emoji }} Run ${{ matrix.check.name }}
        run: |
          echo "🔄 Running ${{ matrix.check.name }}..."
          if [[ "${{ matrix.check.command }}" == "format" ]]; then
            pnpm prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}"
          else
            pnpm turbo ${{ matrix.check.command }}
          fi
          echo "✅ ${{ matrix.check.name }} completed successfully"

  # 🧪 Job 3: Tests unitaires et d'intégration
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ !github.event.pull_request.draft }}
    
    strategy:
      fail-fast: false
      matrix:
        package: 
          - { name: "@erp/web", emoji: "🌐" }
          - { name: "@erp/api", emoji: "🔗" }
          - { name: "@erp/ui", emoji: "🎨" }
          - { name: "@erp/utils", emoji: "🛠️" }
          - { name: "@erp/types", emoji: "📝" }

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: erp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: "pnpm"

      - name: ⚡ Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            .turbo
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: ${{ matrix.package.emoji }} Run tests for ${{ matrix.package.name }}
        run: |
          echo "🧪 Running tests for ${{ matrix.package.name }}..."
          pnpm turbo test --filter=${{ matrix.package.name }}
          echo "✅ Tests completed for ${{ matrix.package.name }}"
        env:
          CI: true
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}

      - name: 📊 Generate coverage report
        run: |
          echo "📊 Generating coverage report..."
          pnpm turbo test:coverage --filter=${{ matrix.package.name }} || true
        continue-on-error: true

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.package.name }}
          name: ${{ matrix.package.name }}
          fail_ci_if_error: false
          verbose: true

  # 🏗️ Job 4: Build et vérification
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [setup, code-quality]
    if: ${{ !github.event.pull_request.draft }}
    
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: "packages", filter: "!@erp/web !@erp/api", emoji: "📦" }
          - { name: "web", filter: "@erp/web", emoji: "🌐" }
          - { name: "api", filter: "@erp/api", emoji: "🔗" }

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: "pnpm"

      - name: ⚡ Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            .turbo
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: ${{ matrix.target.emoji }} Build ${{ matrix.target.name }}
        run: |
          echo "🏗️ Building ${{ matrix.target.name }}..."
          pnpm turbo build --filter='${{ matrix.target.filter }}'
          echo "✅ Build completed for ${{ matrix.target.name }}"
        env:
          NODE_ENV: production

      - name: 📤 Upload build artifacts
        if: matrix.target.name != 'packages'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target.name }}
          path: |
            apps/${{ matrix.target.name }}/dist
            apps/${{ matrix.target.name }}/.next
          retention-days: 1

  # 🛡️ Job 5: Sécurité (VERSION STRICTE POST-CORRECTIONS)
  security:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: "pnpm"

      - name: ⚡ Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: 🔍 Security audit (strict mode)
        run: |
          echo "🔍 Running strict security audit..."
          pnpm audit --audit-level moderate
          echo "✅ No security vulnerabilities found!"

      - name: 🔐 Advanced audit with audit-ci
        run: |
          echo "🔐 Running advanced audit check..."
          pnpm dlx audit-ci --config audit-ci.json
          echo "✅ Advanced audit passed!"

      - name: 📊 Full dependency check
        run: |
          echo "📊 Running full dependency analysis..."
          pnpm deps:full-check
          echo "✅ Dependency check completed!"

      - name: 🔎 Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          ignore-unfixed: false

      - name: 📤 Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: 🔑 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # 🧪 Job 6: Tests End-to-End
  e2e:
    name: 🧪 E2E Tests
    runs-on: ubuntu-latest
    needs: [build, security]
    if: ${{ !github.event.pull_request.draft && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: erp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: "pnpm"

      - name: ⚡ Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/package.json') }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: 🎭 Install Playwright browsers
        run: pnpm dlx playwright install --with-deps chromium

      - name: 🚀 Start applications
        run: |
          echo "🚀 Starting API..."
          pnpm start:api &
          echo "🚀 Starting Web..."
          pnpm start:web &
          
          # Wait for services to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}
          NEXT_PUBLIC_API_URL: http://localhost:3001
          E2E_TEST: true

      - name: 🧪 Run E2E tests
        run: |
          echo "🧪 Running E2E tests..."
          pnpm test:e2e
          echo "✅ E2E tests completed!"
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}
          NEXT_PUBLIC_API_URL: http://localhost:3001
          E2E_TEST: true

      - name: 📤 Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 7

  # 🚀 Job 7: Déploiement Staging
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [build, security, test]
    if: ${{ !github.event.pull_request.draft && github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: 🚀 Deploy to staging
        id: deploy
        run: |
          echo "🚀 Deploying to staging environment..."
          # Ajouter ici vos commandes de déploiement spécifiques
          echo "url=https://staging.topsteel.com" >> $GITHUB_OUTPUT
          echo "✅ Deployment completed!"

      - name: 🔍 Post-deployment health check
        run: |
          echo "🔍 Running post-deployment health checks..."
          # Ajouter des vérifications de santé après déploiement
          echo "✅ Health checks passed!"

  # 🚀 Job 8: Déploiement Production
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: [build, security, test, e2e]
    if: ${{ !github.event.pull_request.draft && github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: 🚀 Deploy to production
        id: deploy
        run: |
          echo "🚀 Deploying to production environment..."
          # Ajouter ici vos commandes de déploiement spécifiques
          echo "url=https://topsteel.com" >> $GITHUB_OUTPUT
          echo "✅ Production deployment completed!"

      - name: 🔍 Post-deployment verification
        run: |
          echo "🔍 Running production verification checks..."
          # Ajouter des vérifications critiques post-production
          echo "✅ Production verification passed!"

  # 📊 Job 9: Rapport final
  report:
    name: 📊 Final Report
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, security]
    if: always() && !github.event.pull_request.draft

    steps:
      - name: 📊 Generate workflow summary
        run: |
          echo "# 🎯 TopSteel CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎉 Pipeline Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Success notification
        if: ${{ needs.code-quality.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
        run: |
          echo "🎉 All checks passed successfully!"
          echo "✅ Code quality, tests, build, and security are all green!"


