name: 🛡️ Security Scanning

on:
  schedule:
    # Weekly security scan on Monday at 2 AM
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      full_scan:
        description: 'Run full security scan including containers'
        required: false
        default: true
        type: boolean

env:
  NODE_OPTIONS: '--max-old-space-size=6144'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Analyse des dépendances
  dependency-scan:
    name: 📦 Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'pnpm'
      
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🔍 Run audit
        run: |
          echo "🔍 Running pnpm audit..."
          pnpm audit --audit-level moderate || true
          
      - name: 🛡️ Run audit-ci
        run: |
          echo "🛡️ Running audit-ci..."
          npx audit-ci --config audit-ci.json || true
      
      - name: 📊 Generate security report
        if: always()
        run: |
          echo "# 🛡️ Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          pnpm audit --json | jq -r '.advisories | to_entries[] | "- **\(.value.module_name)** (\(.value.severity)): \(.value.title)"' >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found ✅" >> $GITHUB_STEP_SUMMARY

  # Analyse SAST avec Semgrep
  sast-scan:
    name: 🔐 SAST Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/typescript
            p/javascript
            p/nodejs
            p/react
          generateSarif: true
      
      - name: 📤 Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # Scan des secrets
  secret-scan:
    name: 🔑 Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔍 TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Analyse des conteneurs Docker
  container-scan:
    name: 🐳 Container Security
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.full_scan == 'true' || github.event.inputs.full_scan == null }}
    
    strategy:
      matrix:
        dockerfile:
          - Dockerfile.api
          - Dockerfile.web
          - Dockerfile.marketplace-api
          - Dockerfile.marketplace-storefront
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🏗️ Build image
        run: |
          docker build -f ${{ matrix.dockerfile }} -t topsteel-scan:${{ matrix.dockerfile }} .
      
      - name: 🔍 Run Trivy scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: topsteel-scan:${{ matrix.dockerfile }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: 📤 Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Analyse des licences
  license-check:
    name: 📜 License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'pnpm'
      
      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 📜 Check licenses
        run: |
          npx license-checker --summary --excludePrivatePackages --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense;WTFPL;0BSD'

  # Rapport de sécurité final
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-scan, license-check]
    if: always()
    
    steps:
      - name: 📊 Generate security summary
        run: |
          echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Dependency Scan: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 SAST Analysis: ${{ needs.sast-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔑 Secret Detection: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Container Scan: ${{ needs.container-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📜 License Check: ${{ needs.license-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.dependency-scan.result }}" == "success" && \
                "${{ needs.sast-scan.result }}" == "success" && \
                "${{ needs.secret-scan.result }}" == "success" && \
                "${{ needs.license-check.result }}" == "success" ]]; then
            echo "## ✅ All security checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Some security checks require attention" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 💬 Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## 🛡️ Security Scan Results
            
            | Check | Status |
            |-------|--------|
            | 📦 Dependencies | ${{ needs.dependency-scan.result }} |
            | 🔐 SAST | ${{ needs.sast-scan.result }} |
            | 🔑 Secrets | ${{ needs.secret-scan.result }} |
            | 🐳 Containers | ${{ needs.container-scan.result }} |
            | 📜 Licenses | ${{ needs.license-check.result }} |
            
            View full report in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });