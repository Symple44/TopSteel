name: Terraform Infrastructure

on:
  pull_request:
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/terraform.yml'
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TERRAFORM_VERSION: '1.5.0'
  AWS_REGION: 'eu-west-1'
  TF_LOG: INFO

jobs:
  terraform-checks:
    name: Terraform Validation & Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Setup tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          version: latest
      
      - name: Setup Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: infrastructure/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov-report.sarif
      
      - name: Setup Infracost
        uses: infracost/setup-infracost@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform
          terraform fmt -check=true -recursive
      
      - name: Terraform Init
        run: |
          cd infrastructure/terraform/environments/${{ matrix.environment }}
          terraform init -backend=false
      
      - name: Terraform Validate
        run: |
          cd infrastructure/terraform/environments/${{ matrix.environment }}
          terraform validate
      
      - name: TFSec Security Scan
        run: |
          cd infrastructure/terraform
          tfsec . --format json --out tfsec-report.json
      
      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports-${{ matrix.environment }}
          path: |
            infrastructure/terraform/tfsec-report.json
            checkov-report.sarif
      
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-report.sarif

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-checks
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    strategy:
      matrix:
        environment: [dev, staging, prod]
    environment:
      name: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          cd infrastructure/terraform/environments/${{ matrix.environment }}
          terraform init \
            -backend-config="bucket=topsteel-terraform-state-${{ matrix.environment }}" \
            -backend-config="key=infrastructure/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=topsteel-terraform-locks-${{ matrix.environment }}"
      
      - name: Terraform Plan
        id: plan
        run: |
          cd infrastructure/terraform/environments/${{ matrix.environment }}
          terraform plan \
            -var-file="terraform.tfvars" \
            -out="${{ matrix.environment }}.tfplan" \
            -no-color | tee plan.txt
      
      - name: Generate Plan Summary
        run: |
          cd infrastructure/terraform/environments/${{ matrix.environment }}
          echo "## Terraform Plan Summary for ${{ matrix.environment }}" > plan-summary.md
          echo "" >> plan-summary.md
          echo "### Resources" >> plan-summary.md
          grep -E "^  [#~+-]" plan.txt | head -50 >> plan-summary.md || true
          echo "" >> plan-summary.md
          echo "### Summary" >> plan-summary.md
          grep "Plan:" plan.txt >> plan-summary.md || true
      
      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('infrastructure/terraform/environments/${{ matrix.environment }}/plan-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: plan
            });
      
      - name: Cost Estimation
        run: |
          cd infrastructure/terraform/environments/${{ matrix.environment }}
          infracost breakdown \
            --path . \
            --terraform-var-file terraform.tfvars \
            --format json \
            --out-file infracost.json
      
      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: |
            infrastructure/terraform/environments/${{ matrix.environment }}/*.tfplan
            infrastructure/terraform/environments/${{ matrix.environment }}/plan.txt
            infrastructure/terraform/environments/${{ matrix.environment }}/infracost.json

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment:
      name: ${{ github.event.inputs.environment || 'prod' }}
      url: https://${{ github.event.inputs.environment || 'prod' }}.topsteel.fr
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          ENV=${{ github.event.inputs.environment || 'prod' }}
          cd infrastructure/terraform/environments/${ENV}
          terraform init \
            -backend-config="bucket=topsteel-terraform-state-${ENV}" \
            -backend-config="key=infrastructure/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=topsteel-terraform-locks-${ENV}"
      
      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-${{ github.event.inputs.environment || 'prod' }}
          path: infrastructure/terraform/environments/${{ github.event.inputs.environment || 'prod' }}
      
      - name: Terraform Apply
        run: |
          ENV=${{ github.event.inputs.environment || 'prod' }}
          cd infrastructure/terraform/environments/${ENV}
          terraform apply -auto-approve ${ENV}.tfplan
      
      - name: Terraform Output
        id: output
        run: |
          ENV=${{ github.event.inputs.environment || 'prod' }}
          cd infrastructure/terraform/environments/${ENV}
          terraform output -json > outputs.json
          echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
          echo "db_endpoint=$(terraform output -raw db_endpoint)" >> $GITHUB_OUTPUT
      
      - name: Update Kubernetes Config
        run: |
          ENV=${{ github.event.inputs.environment || 'prod' }}
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name topsteel-${ENV}
      
      - name: Deploy Application
        run: |
          echo "Application deployment would happen here"
          # kubectl apply -f kubernetes/
      
      - name: Notify Deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            Terraform Apply completed for ${{ github.event.inputs.environment || 'prod' }}
            Status: ${{ job.status }}
            Cluster: ${{ steps.output.outputs.cluster_endpoint }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment:
      name: ${{ github.event.inputs.environment }}-destroy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          cd infrastructure/terraform/environments/${{ github.event.inputs.environment }}
          terraform init \
            -backend-config="bucket=topsteel-terraform-state-${{ github.event.inputs.environment }}" \
            -backend-config="key=infrastructure/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=topsteel-terraform-locks-${{ github.event.inputs.environment }}"
      
      - name: Terraform Destroy
        run: |
          cd infrastructure/terraform/environments/${{ github.event.inputs.environment }}
          terraform destroy \
            -var-file="terraform.tfvars" \
            -auto-approve
      
      - name: Notify Destruction
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            Terraform Destroy completed for ${{ github.event.inputs.environment }}
            Status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}