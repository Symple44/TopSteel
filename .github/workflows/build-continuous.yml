name: Build Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22.14.0'
  PNPM_VERSION: '10.13.1'
  REGISTRY_URL: 'https://registry.npmjs.org'
  NODE_OPTIONS: '--max-old-space-size=6144'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-matrix:
    name: Build Matrix
    runs-on: ubuntu-latest
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        environment: [development, staging, production]
        app: [api, web, marketplace-api, marketplace-storefront]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ matrix.environment }}-${{ matrix.app }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ matrix.environment }}-${{ matrix.app }}-
            ${{ runner.os }}-turbo-${{ matrix.environment }}-
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: pnpm ci:install

      - name: Build packages
        run: pnpm build:packages

      - name: Set environment variables
        run: |
          case "${{ matrix.environment }}" in
            development)
              echo "NODE_ENV=development" >> $GITHUB_ENV
              echo "BUILD_ENV=dev" >> $GITHUB_ENV
              ;;
            staging)
              echo "NODE_ENV=production" >> $GITHUB_ENV
              echo "BUILD_ENV=staging" >> $GITHUB_ENV
              ;;
            production)
              echo "NODE_ENV=production" >> $GITHUB_ENV
              echo "BUILD_ENV=prod" >> $GITHUB_ENV
              ;;
          esac

      - name: Build API
        if: matrix.app == 'api'
        run: |
          echo "🏗️ Building API for ${{ matrix.environment }}..."
          cd apps/api
          pnpm build
          echo "✅ API build completed"

      - name: Build Web App
        if: matrix.app == 'web'
        run: |
          echo "🏗️ Building Web App for ${{ matrix.environment }}..."
          cd apps/web
          pnpm build
          echo "✅ Web App build completed"

      - name: Build Marketplace API
        if: matrix.app == 'marketplace-api'
        run: |
          echo "🏗️ Building Marketplace API for ${{ matrix.environment }}..."
          cd apps/marketplace-api
          pnpm build
          echo "✅ Marketplace API build completed"

      - name: Build Marketplace Storefront
        if: matrix.app == 'marketplace-storefront'
        run: |
          echo "🏗️ Building Marketplace Storefront for ${{ matrix.environment }}..."
          cd apps/marketplace-storefront
          pnpm build
          echo "✅ Marketplace Storefront build completed"

      - name: Verify build integrity
        run: |
          echo "🔍 Verifying build integrity..."
          
          case "${{ matrix.app }}" in
            api)
              if [ ! -d "apps/api/dist" ]; then
                echo "❌ API build failed - dist directory not found"
                exit 1
              fi
              echo "✅ API build integrity verified"
              ;;
            web)
              if [ ! -d "apps/web/.next" ]; then
                echo "❌ Web App build failed - .next directory not found"
                exit 1
              fi
              echo "✅ Web App build integrity verified"
              ;;
            marketplace-api)
              if [ ! -d "apps/marketplace-api/dist" ]; then
                echo "❌ Marketplace API build failed - dist directory not found"
                exit 1
              fi
              echo "✅ Marketplace API build integrity verified"
              ;;
            marketplace-storefront)
              if [ ! -d "apps/marketplace-storefront/.next" ]; then
                echo "❌ Marketplace Storefront build failed - .next directory not found"
                exit 1
              fi
              echo "✅ Marketplace Storefront build integrity verified"
              ;;
          esac

      - name: Generate build metadata
        run: |
          echo "📝 Generating build metadata..."
          mkdir -p build-artifacts
          
          cat > build-artifacts/metadata.json << EOF
          {
            "app": "${{ matrix.app }}",
            "environment": "${{ matrix.environment }}",
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "gitCommit": "${{ github.sha }}",
            "gitBranch": "${{ github.ref_name }}",
            "nodeVersion": "${{ env.NODE_VERSION }}",
            "pnpmVersion": "${{ env.PNPM_VERSION }}"
          }
          EOF
          
          echo "✅ Build metadata generated"

      - name: Create build archive
        run: |
          echo "📦 Creating build archive..."
          
          case "${{ matrix.app }}" in
            api)
              tar -czf build-artifacts/api-${{ matrix.environment }}.tar.gz -C apps/api dist package.json
              ;;
            web)
              tar -czf build-artifacts/web-${{ matrix.environment }}.tar.gz -C apps/web .next package.json public
              ;;
            marketplace-api)
              tar -czf build-artifacts/marketplace-api-${{ matrix.environment }}.tar.gz -C apps/marketplace-api dist package.json
              ;;
            marketplace-storefront)
              tar -czf build-artifacts/marketplace-storefront-${{ matrix.environment }}.tar.gz -C apps/marketplace-storefront .next package.json public
              ;;
          esac
          
          echo "✅ Build archive created"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.app }}-${{ matrix.environment }}-${{ github.run_number }}
          path: |
            build-artifacts/
          retention-days: 30
          compression-level: 6

  docker-build:
    name: Docker Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-matrix]

    strategy:
      matrix:
        app: [api, web, marketplace-api, marketplace-storefront]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "🐳 Building Docker image for ${{ matrix.app }}..."
          
          case "${{ matrix.app }}" in
            api)
              docker build -f Dockerfile.api -t topsteel-api:${{ github.sha }} .
              ;;
            web)
              docker build -f Dockerfile.web -t topsteel-web:${{ github.sha }} .
              ;;
            marketplace-api)
              docker build -f Dockerfile.marketplace-api -t topsteel-marketplace-api:${{ github.sha }} .
              ;;
            marketplace-storefront)
              docker build -f Dockerfile.marketplace-storefront -t topsteel-marketplace-storefront:${{ github.sha }} .
              ;;
          esac
          
          echo "✅ Docker image built successfully"

      - name: Test Docker image
        run: |
          echo "🧪 Testing Docker image for ${{ matrix.app }}..."
          
          case "${{ matrix.app }}" in
            api)
              docker run --rm topsteel-api:${{ github.sha }} node --version
              ;;
            web)
              docker run --rm topsteel-web:${{ github.sha }} node --version
              ;;
            marketplace-api)
              docker run --rm topsteel-marketplace-api:${{ github.sha }} node --version
              ;;
            marketplace-storefront)
              docker run --rm topsteel-marketplace-storefront:${{ github.sha }} node --version
              ;;
          esac
          
          echo "✅ Docker image test passed"

  typescript-compilation:
    name: TypeScript Compilation Check
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm ci:install

      - name: Build packages
        run: pnpm build:packages

      - name: TypeScript compilation check
        run: |
          echo "🔧 Checking TypeScript compilation..."
          pnpm type-check
          echo "✅ TypeScript compilation successful"

      - name: Generate TypeScript report
        run: |
          echo "📝 Generating TypeScript report..."
          npx tsc --noEmit --listFiles > typescript-files.txt || true
          wc -l typescript-files.txt >> typescript-report.txt
          echo "✅ TypeScript report generated"

      - name: Upload TypeScript report
        uses: actions/upload-artifact@v4
        with:
          name: typescript-report-${{ github.run_number }}
          path: |
            typescript-files.txt
            typescript-report.txt
          retention-days: 7

  monorepo-integrity:
    name: Monorepo Integrity Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm ci:install

      - name: Check package consistency
        run: |
          echo "📦 Checking package consistency..."
          pnpm verify:packages
          echo "✅ Package consistency verified"

      - name: Check workspace dependencies
        run: |
          echo "🔗 Checking workspace dependencies..."
          pnpm list --recursive --depth=0
          echo "✅ Workspace dependencies checked"

      - name: Validate turbo configuration
        run: |
          echo "⚡ Validating Turbo configuration..."
          npx turbo build --dry-run
          echo "✅ Turbo configuration validated"

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-matrix, docker-build, typescript-compilation, monorepo-integrity]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Generate build summary
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build Matrix | ${{ needs.build-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | ${{ needs.typescript-compilation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Monorepo Integrity | ${{ needs.monorepo-integrity.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build completed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY