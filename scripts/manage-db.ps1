#!/usr/bin/env pwsh
# Script de gestion base de donn√©es ERP TopSteel (VERSION CORRIG√âE)
param(
    [Parameter(Mandatory)]
    [ValidateSet('status', 'backup', 'restore', 'reset', 'migrate', 'seed')]
    [string]$Action,
    [string]$File = ""
)

$DBParams = @{
    Host     = 'localhost'
    Port     = '5432' 
    User     = 'postgres'
    Password = 'postgres'
    Database = 'erp_topsteel'
}

switch ($Action) {
    'status' {
        Write-Host "√âtat base 'erp_topsteel':" -ForegroundColor Cyan
        $env:PGPASSWORD = $DBParams.Password
        psql -h $DBParams.Host -p $DBParams.Port -U $DBParams.User -d $DBParams.Database -c "\dt"
        $env:PGPASSWORD = $null
    }
    'backup' {
        # Cr√©er le dossier sql/backups s'il n'existe pas
        if (-not (Test-Path "sql/backups")) {
            New-Item -ItemType Directory -Path "sql/backups" -Force | Out-Null
            Write-Host "üìÅ Dossier sql/backups cr√©√©" -ForegroundColor Blue
        }
        
        # G√©n√©rer le nom de fichier avec chemin complet
        if ($File -eq "") {
            $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
            $File = "sql/backups/backup_$timestamp.sql"
        }
        else {
            # Si un fichier est sp√©cifi√©, s'assurer qu'il va dans sql/backups
            if (-not $File.StartsWith("sql/backups/")) {
                $File = "sql/backups/$File"
            }
        }
        
        Write-Host "üíæ Sauvegarde vers $File..." -ForegroundColor Yellow
        $env:PGPASSWORD = $DBParams.Password
        pg_dump -h $DBParams.Host -p $DBParams.Port -U $DBParams.User $DBParams.Database > $File
        $env:PGPASSWORD = $null
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Sauvegarde termin√©e avec succ√®s" -ForegroundColor Green
            Write-Host "üìÑ Fichier: $File" -ForegroundColor Cyan
            
            # Afficher la taille du fichier
            if (Test-Path $File) {
                $fileSize = [math]::Round((Get-Item $File).length / 1KB, 2)
                Write-Host "üìä Taille: $fileSize KB" -ForegroundColor Cyan
            }
        }
        else {
            Write-Host "‚ùå Erreur lors de la sauvegarde" -ForegroundColor Red
        }
    }
    'restore' {
        if ($File -eq "") {
            Write-Host "‚ùå Sp√©cifiez un fichier: pwsh scripts/manage-db.ps1 restore -File nom_fichier.sql" -ForegroundColor Red
            
            # Lister les sauvegardes disponibles
            if (Test-Path "sql/backups") {
                $backups = Get-ChildItem "sql/backups/*.sql" | Sort-Object LastWriteTime -Descending
                if ($backups.Count -gt 0) {
                    Write-Host "üí° Sauvegardes disponibles:" -ForegroundColor Blue
                    $backups | ForEach-Object {
                        Write-Host "   - $($_.Name)" -ForegroundColor White
                    }
                }
            }
            return
        }
        
        # Ajouter le chemin sql/backups si n√©cessaire
        if (-not $File.Contains("/") -and -not $File.Contains("\")) {
            $File = "sql/backups/$File"
        }
        
        Write-Host "üì• Restauration depuis $File..." -ForegroundColor Yellow
        
        # V√©rifier que le fichier existe
        if (-not (Test-Path $File)) {
            Write-Host "‚ùå Fichier '$File' introuvable" -ForegroundColor Red
            return
        }
        
        $env:PGPASSWORD = $DBParams.Password
        # Utiliser -f au lieu de < (corrig√©)
        psql -h $DBParams.Host -p $DBParams.Port -U $DBParams.User -d $DBParams.Database -f $File
        $env:PGPASSWORD = $null
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Restauration termin√©e avec succ√®s" -ForegroundColor Green
        }
        else {
            Write-Host "‚ùå Erreur lors de la restauration" -ForegroundColor Red
        }
    }
    'reset' {
        Write-Host "‚ö†Ô∏è ATTENTION: Remise √† z√©ro compl√®te de la base de donn√©es!" -ForegroundColor Red
        Write-Host "Ceci supprimera TOUTES les donn√©es existantes." -ForegroundColor Yellow
        $confirm = Read-Host "Tapez 'RESET' pour confirmer (ou Enter pour annuler)"
        
        if ($confirm -eq 'RESET') {
            Write-Host "üîÑ Reset de la base de donn√©es..." -ForegroundColor Yellow
            
            # Cr√©er une sauvegarde automatique avant reset
            $backupFile = "sql/backups/backup_before_reset_$(Get-Date -Format 'yyyyMMdd_HHmmss').sql"
            if (-not (Test-Path "sql/backups")) {
                New-Item -ItemType Directory -Path "sql/backups" -Force | Out-Null
            }
            
            Write-Host "üíæ Sauvegarde automatique avant reset..." -ForegroundColor Blue
            $env:PGPASSWORD = $DBParams.Password
            pg_dump -h $DBParams.Host -p $DBParams.Port -U $DBParams.User $DBParams.Database > $backupFile
            Write-Host "‚úÖ Sauvegarde: $backupFile" -ForegroundColor Green
            
            # Supprimer et recr√©er la base
            psql -h $DBParams.Host -p $DBParams.Port -U $DBParams.User -d postgres -c "DROP DATABASE IF EXISTS $($DBParams.Database);"
            psql -h $DBParams.Host -p $DBParams.Port -U $DBParams.User -d postgres -c "CREATE DATABASE $($DBParams.Database);"
            
            $env:PGPASSWORD = $null
            
            Write-Host "‚úÖ Base de donn√©es reset termin√©" -ForegroundColor Green
            Write-Host "üí° Relancez 'pnpm sql:full-setup && pnpm sql:seed-data' pour recr√©er le sch√©ma" -ForegroundColor Blue
        }
        else {
            Write-Host "‚ùå Reset annul√©" -ForegroundColor Yellow
        }
    }
    'migrate' {
        Write-Host "üîÑ Ex√©cution des migrations..." -ForegroundColor Yellow
        Push-Location "apps/api"
        try {
            npx typeorm migration:run
            Write-Host "‚úÖ Migrations termin√©es" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ùå Erreur dans les migrations" -ForegroundColor Red
        }
        Pop-Location
    }
    'seed' {
        Write-Host "üå± Ajout donn√©es de test..." -ForegroundColor Yellow
        $env:PGPASSWORD = $DBParams.Password
        
        # V√©rifier si le fichier de seed existe
        if (Test-Path "sql/seeds/01-sample-data.sql") {
            psql -h $DBParams.Host -p $DBParams.Port -U $DBParams.User -d $DBParams.Database -f "sql/seeds/01-sample-data.sql"
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Donn√©es de test ajout√©es" -ForegroundColor Green
            }
            else {
                Write-Host "‚ùå Erreur lors de l'ajout des donn√©es" -ForegroundColor Red
            }
        }
        else {
            Write-Host "‚ö†Ô∏è Fichier sql/seeds/01-sample-data.sql introuvable" -ForegroundColor Yellow
        }
        
        $env:PGPASSWORD = $null
    }
}

# Nettoyer les variables d'environnement
$env:PGPASSWORD = $null