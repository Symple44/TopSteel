#!/usr/bin/env ts-node

/**
 * AGENTS DE QUALIT√â POUR LE SYST√àME PRICING
 * 
 * Script orchestrateur qui utilise plusieurs agents sp√©cialis√©s pour :
 * - V√©rifier la qualit√© du code
 * - Tester les builds
 * - Valider l'int√©gration
 * - G√©n√©rer des rapports
 */

import { execSync } from 'child_process'
import { existsSync, writeFileSync, readFileSync } from 'fs'
import { join } from 'path'
import * as colors from 'colors/safe'

interface QualityCheck {
  name: string
  description: string
  command?: string
  check: () => Promise<QualityResult>
}

interface QualityResult {
  success: boolean
  score: number
  message: string
  details?: string[]
  fixes?: string[]
}

class PricingQualityOrchestrator {
  private readonly rootDir = process.cwd()
  private readonly pricingDir = join(this.rootDir, 'apps/api/src/features/pricing')
  
  private results: Map<string, QualityResult> = new Map()
  
  constructor() {
    console.log(colors.cyan('ü§ñ Agents de Qualit√© Pricing - D√©marrage\n'))
  }

  /**
   * Agent Principal - Orchestre tous les autres agents
   */
  async run(): Promise<void> {
    const agents: QualityCheck[] = [
      {
        name: 'TypeScript Agent',
        description: 'V√©rification des types et compilation',
        check: () => this.typeScriptAgent()
      },
      {
        name: 'Code Quality Agent', 
        description: 'Analyse statique et complexit√©',
        check: () => this.codeQualityAgent()
      },
      {
        name: 'Test Coverage Agent',
        description: 'Couverture de tests et qualit√©',
        check: () => this.testCoverageAgent()
      },
      {
        name: 'Security Agent',
        description: 'Audit s√©curit√© et vuln√©rabilit√©s',
        check: () => this.securityAgent()
      },
      {
        name: 'Performance Agent',
        description: 'Analyse des performances',
        check: () => this.performanceAgent()
      },
      {
        name: 'Build Agent',
        description: 'V√©rification des builds',
        check: () => this.buildAgent()
      },
      {
        name: 'Integration Agent',
        description: 'Tests d\'int√©gration syst√®me',
        check: () => this.integrationAgent()
      }
    ]

    let totalScore = 0
    let maxScore = 0

    for (const agent of agents) {
      console.log(colors.blue(`\nüîÑ ${agent.name} - ${agent.description}`))
      console.log(colors.gray('‚îÄ'.repeat(60)))
      
      try {
        const result = await agent.check()
        this.results.set(agent.name, result)
        
        const status = result.success ? '‚úÖ' : '‚ùå'
        const color = result.success ? colors.green : colors.red
        
        console.log(color(`${status} ${result.message} (Score: ${result.score}/100)`))
        
        if (result.details && result.details.length > 0) {
          console.log(colors.yellow('\nD√©tails:'))
          result.details.forEach(detail => console.log(colors.gray(`  ‚Ä¢ ${detail}`)))
        }
        
        if (!result.success && result.fixes && result.fixes.length > 0) {
          console.log(colors.yellow('\nCorrections sugg√©r√©es:'))
          result.fixes.forEach(fix => console.log(colors.cyan(`  ‚ö° ${fix}`)))
        }
        
        totalScore += result.score
        maxScore += 100
        
      } catch (error) {
        console.log(colors.red(`‚ùå Erreur: ${error.message}`))
        this.results.set(agent.name, {
          success: false,
          score: 0,
          message: `Erreur d'ex√©cution: ${error.message}`
        })
      }
    }

    await this.generateReport(totalScore, maxScore)
  }

  /**
   * Agent TypeScript - V√©rifie les types et la compilation
   */
  private async typeScriptAgent(): Promise<QualityResult> {
    const checks = []
    let score = 100
    
    try {
      // 1. V√©rifier que TypeScript compile
      console.log('  Compilation TypeScript...')
      execSync('npx tsc --noEmit --project apps/api/tsconfig.json', { 
        stdio: 'pipe',
        cwd: this.rootDir 
      })
      checks.push('‚úÖ Compilation TypeScript r√©ussie')
      
    } catch (error) {
      score -= 30
      checks.push('‚ùå Erreurs de compilation TypeScript')
      const output = error.stdout?.toString() || error.message
      return {
        success: false,
        score: score,
        message: 'Erreurs de compilation d√©tect√©es',
        details: [output.slice(0, 500) + '...'],
        fixes: [
          'Corriger les erreurs TypeScript avec: npx tsc --noEmit',
          'V√©rifier les imports manquants',
          'Ajouter les types manquants'
        ]
      }
    }
    
    // 2. V√©rifier les types stricts
    const tsConfigPath = join(this.rootDir, 'apps/api/tsconfig.json')
    if (existsSync(tsConfigPath)) {
      const tsConfig = JSON.parse(readFileSync(tsConfigPath, 'utf8'))
      const strict = tsConfig.compilerOptions?.strict
      if (strict) {
        checks.push('‚úÖ Mode strict activ√©')
      } else {
        score -= 10
        checks.push('‚ö†Ô∏è Mode strict recommand√©')
      }
    }
    
    // 3. V√©rifier les any types
    try {
      const grepResult = execSync(`grep -r "any" ${this.pricingDir} --include="*.ts" | wc -l`, { 
        stdio: 'pipe' 
      }).toString().trim()
      
      const anyCount = parseInt(grepResult) || 0
      if (anyCount === 0) {
        checks.push('‚úÖ Aucun type any d√©tect√©')
      } else if (anyCount < 5) {
        score -= 5
        checks.push(`‚ö†Ô∏è ${anyCount} types 'any' d√©tect√©s`)
      } else {
        score -= 15
        checks.push(`‚ùå ${anyCount} types 'any' d√©tect√©s (trop nombreux)`)
      }
    } catch (error) {
      checks.push('‚ö†Ô∏è Impossible de v√©rifier les types any')
    }

    return {
      success: score >= 80,
      score,
      message: score >= 80 ? 'Types excellent' : 'Types √† am√©liorer',
      details: checks
    }
  }

  /**
   * Agent Code Quality - Analyse statique
   */
  private async codeQualityAgent(): Promise<QualityResult> {
    const checks = []
    let score = 100
    
    try {
      // 1. ESLint check
      console.log('  Analyse ESLint...')
      try {
        execSync(`npx eslint ${this.pricingDir} --ext .ts --format json`, { 
          stdio: 'pipe' 
        })
        checks.push('‚úÖ Code ESLint conforme')
      } catch (error) {
        const output = error.stdout?.toString()
        if (output) {
          const results = JSON.parse(output)
          const totalIssues = results.reduce((sum: number, file: any) => 
            sum + file.errorCount + file.warningCount, 0)
          
          if (totalIssues < 10) {
            score -= 10
            checks.push(`‚ö†Ô∏è ${totalIssues} probl√®mes ESLint mineurs`)
          } else {
            score -= 25
            checks.push(`‚ùå ${totalIssues} probl√®mes ESLint`)
          }
        }
      }
      
      // 2. Biome check (si disponible)
      if (existsSync(join(this.rootDir, 'biome.json'))) {
        try {
          execSync(`npx @biomejs/biome check ${this.pricingDir}`, { stdio: 'pipe' })
          checks.push('‚úÖ Code Biome conforme')
        } catch (error) {
          score -= 15
          checks.push('‚ö†Ô∏è Probl√®mes de formatage Biome')
        }
      }
      
      // 3. V√©rifier la complexit√© cyclomatique
      try {
        const complexFiles = execSync(
          `find ${this.pricingDir} -name "*.ts" -exec wc -l {} \\; | sort -nr | head -5`,
          { stdio: 'pipe' }
        ).toString()
        
        const maxLines = complexFiles.split('\n')[0]?.split(' ')[0]
        if (parseInt(maxLines) > 1000) {
          score -= 10
          checks.push(`‚ö†Ô∏è Fichier tr√®s volumineux d√©tect√© (${maxLines} lignes)`)
        } else {
          checks.push('‚úÖ Taille des fichiers raisonnable')
        }
      } catch (error) {
        checks.push('‚ö†Ô∏è Impossible de v√©rifier la complexit√©')
      }
      
      // 4. V√©rifier les imports circulaires
      try {
        const madgeResult = execSync(
          `npx madge --circular --extensions ts ${this.pricingDir}`,
          { stdio: 'pipe' }
        ).toString()
        
        if (madgeResult.includes('No circular dependency found')) {
          checks.push('‚úÖ Aucune d√©pendance circulaire')
        } else {
          score -= 20
          checks.push('‚ùå D√©pendances circulaires d√©tect√©es')
        }
      } catch (error) {
        // Madge pas install√©, on passe
        checks.push('‚ö†Ô∏è V√©rification d√©pendances circulaires ignor√©e')
      }
      
    } catch (error) {
      score = 0
      return {
        success: false,
        score,
        message: 'Erreur analyse qualit√© code',
        details: [error.message]
      }
    }

    return {
      success: score >= 75,
      score,
      message: score >= 75 ? 'Qualit√© code excellente' : 'Qualit√© code √† am√©liorer',
      details: checks,
      fixes: score < 75 ? [
        'Corriger les probl√®mes ESLint: npx eslint --fix',
        'Formater le code: npx biome format --write',
        'Refactoriser les gros fichiers'
      ] : undefined
    }
  }

  /**
   * Agent Test Coverage - V√©rifie les tests
   */
  private async testCoverageAgent(): Promise<QualityResult> {
    const checks = []
    let score = 0
    
    // 1. V√©rifier l'existence de tests
    const testFiles = [
      'pricing-engine.service.spec.ts',
      'pricing-cache.service.spec.ts',
      'pricing.controller.spec.ts'
    ]
    
    let existingTests = 0
    for (const testFile of testFiles) {
      const testPath = join(this.pricingDir, testFile)
      if (existsSync(testPath)) {
        existingTests++
        checks.push(`‚úÖ Test trouv√©: ${testFile}`)
      } else {
        checks.push(`‚ùå Test manquant: ${testFile}`)
      }
    }
    
    score = (existingTests / testFiles.length) * 100
    
    // 2. Lancer les tests s'ils existent
    if (existingTests > 0) {
      try {
        console.log('  Ex√©cution des tests...')
        const testOutput = execSync(
          'npm run test:pricing -- --coverage --passWithNoTests',
          { stdio: 'pipe', cwd: this.rootDir }
        ).toString()
        
        // Parser la couverture si Jest est utilis√©
        const coverageMatch = testOutput.match(/All files[|\s]*(\d+\.?\d*)/);
        if (coverageMatch) {
          const coverage = parseFloat(coverageMatch[1])
          if (coverage >= 80) {
            score = Math.max(score, 90)
            checks.push(`‚úÖ Couverture excellente: ${coverage}%`)
          } else if (coverage >= 60) {
            score = Math.max(score, 70)
            checks.push(`‚ö†Ô∏è Couverture correcte: ${coverage}%`)
          } else {
            score = Math.max(score, 40)
            checks.push(`‚ùå Couverture faible: ${coverage}%`)
          }
        }
        
      } catch (error) {
        checks.push('‚ùå √âchec ex√©cution des tests')
        console.log('Sortie d\'erreur:', error.stdout?.toString())
      }
    }

    return {
      success: score >= 60,
      score,
      message: score >= 60 ? 'Couverture test acceptable' : 'Tests insuffisants',
      details: checks,
      fixes: score < 60 ? [
        'Cr√©er les tests manquants',
        'Viser une couverture >= 80%',
        'Ajouter des tests d\'int√©gration'
      ] : undefined
    }
  }

  /**
   * Agent Security - Audit de s√©curit√©
   */
  private async securityAgent(): Promise<QualityResult> {
    const checks = []
    let score = 100
    
    try {
      // 1. Audit NPM
      console.log('  Audit s√©curit√© NPM...')
      try {
        const auditResult = execSync('npm audit --json', { 
          stdio: 'pipe', 
          cwd: this.rootDir 
        })
        
        const audit = JSON.parse(auditResult.toString())
        const vulnerabilities = audit.metadata?.vulnerabilities
        
        if (vulnerabilities) {
          const critical = vulnerabilities.critical || 0
          const high = vulnerabilities.high || 0
          const moderate = vulnerabilities.moderate || 0
          
          if (critical > 0) {
            score -= 40
            checks.push(`‚ùå ${critical} vuln√©rabilit√©s critiques`)
          }
          if (high > 0) {
            score -= 20
            checks.push(`‚ö†Ô∏è ${high} vuln√©rabilit√©s √©lev√©es`)
          }
          if (moderate > 0) {
            score -= 10
            checks.push(`‚ö†Ô∏è ${moderate} vuln√©rabilit√©s mod√©r√©es`)
          }
          
          if (critical === 0 && high === 0 && moderate === 0) {
            checks.push('‚úÖ Aucune vuln√©rabilit√© d√©tect√©e')
          }
        }
      } catch (error) {
        score -= 20
        checks.push('‚ùå Impossible d\'effectuer l\'audit NPM')
      }
      
      // 2. V√©rifier les patterns dangereux dans le code
      console.log('  Analyse patterns dangereux...')
      
      const dangerousPatterns = [
        { pattern: 'eval\\(', message: 'Usage de eval() d√©tect√©' },
        { pattern: 'innerHTML\\s*=', message: 'Assignment innerHTML d√©tect√©' },
        { pattern: 'document\\.write', message: 'Usage de document.write d√©tect√©' },
        { pattern: 'process\\.env\\.PASSWORD', message: 'Mot de passe potentiel en dur' },
        { pattern: 'password\\s*=\\s*["\']', message: 'Mot de passe en dur potentiel' }
      ]
      
      for (const { pattern, message } of dangerousPatterns) {
        try {
          const result = execSync(
            `grep -r "${pattern}" ${this.pricingDir} --include="*.ts" || true`,
            { stdio: 'pipe' }
          ).toString()
          
          if (result.trim()) {
            score -= 15
            checks.push(`‚ö†Ô∏è ${message}`)
          }
        } catch (error) {
          // Ignore grep errors
        }
      }
      
      // 3. V√©rifier la s√©curisation du parser mathjs
      const engineServicePath = join(this.pricingDir, 'services/pricing-engine.service.ts')
      if (existsSync(engineServicePath)) {
        const content = readFileSync(engineServicePath, 'utf8')
        if (content.includes('mathParser.scope') || content.includes('allowedFunctions')) {
          checks.push('‚úÖ Parser mathjs s√©curis√©')
        } else {
          score -= 25
          checks.push('‚ùå Parser mathjs non s√©curis√©')
        }
      }
      
      if (checks.length === 0) {
        checks.push('‚úÖ Aucun probl√®me de s√©curit√© d√©tect√©')
      }

    } catch (error) {
      score = 0
      return {
        success: false,
        score,
        message: 'Erreur audit s√©curit√©',
        details: [error.message]
      }
    }

    return {
      success: score >= 80,
      score,
      message: score >= 80 ? 'S√©curit√© excellente' : 'Probl√®mes de s√©curit√© d√©tect√©s',
      details: checks,
      fixes: score < 80 ? [
        'Corriger les vuln√©rabilit√©s: npm audit fix',
        'S√©curiser le parser mathjs',
        '√âviter les patterns dangereux'
      ] : undefined
    }
  }

  /**
   * Agent Performance - Analyse des performances
   */
  private async performanceAgent(): Promise<QualityResult> {
    const checks = []
    let score = 100
    
    try {
      // 1. V√©rifier les imports lourds
      const heavyImports = ['lodash', 'moment', 'axios']
      for (const lib of heavyImports) {
        try {
          const result = execSync(
            `grep -r "import.*${lib}" ${this.pricingDir} --include="*.ts" || true`,
            { stdio: 'pipe' }
          ).toString()
          
          if (result.trim()) {
            score -= 5
            checks.push(`‚ö†Ô∏è Import lourd d√©tect√©: ${lib}`)
          }
        } catch (error) {
          // Ignore
        }
      }
      
      // 2. V√©rifier les boucles potentiellement probl√©matiques
      const problematicPatterns = [
        'for.*in.*forEach',
        'while.*true',
        '\.map.*\.map',
        '\.filter.*\.filter'
      ]
      
      for (const pattern of problematicPatterns) {
        try {
          const result = execSync(
            `grep -r "${pattern}" ${this.pricingDir} --include="*.ts" || true`,
            { stdio: 'pipe' }
          ).toString()
          
          if (result.trim()) {
            score -= 10
            checks.push(`‚ö†Ô∏è Pattern performance suspect: ${pattern}`)
          }
        } catch (error) {
          // Ignore
        }
      }
      
      // 3. V√©rifier l'utilisation des caches
      const cacheServicePath = join(this.pricingDir, 'services/pricing-cache.service.ts')
      if (existsSync(cacheServicePath)) {
        checks.push('‚úÖ Service de cache impl√©ment√©')
        
        const engineServicePath = join(this.pricingDir, 'services/pricing-engine.service.ts')
        if (existsSync(engineServicePath)) {
          const content = readFileSync(engineServicePath, 'utf8')
          if (content.includes('PricingCacheService')) {
            checks.push('‚úÖ Cache int√©gr√© dans le moteur')
          } else {
            score -= 15
            checks.push('‚ùå Cache non int√©gr√© dans le moteur')
          }
        }
      } else {
        score -= 20
        checks.push('‚ùå Service de cache manquant')
      }
      
      // 4. V√©rifier la pagination
      try {
        const result = execSync(
          `grep -r "calculateBulkPrices" ${this.pricingDir} --include="*.ts"`,
          { stdio: 'pipe' }
        ).toString()
        
        if (result.includes('batchSize') || result.includes('limit')) {
          checks.push('‚úÖ Pagination impl√©ment√©e')
        } else {
          score -= 10
          checks.push('‚ö†Ô∏è Pagination non d√©tect√©e')
        }
      } catch (error) {
        checks.push('‚ö†Ô∏è Impossible de v√©rifier la pagination')
      }
      
      if (checks.length === 0) {
        checks.push('‚úÖ Aucun probl√®me de performance d√©tect√©')
      }

    } catch (error) {
      score = 0
      return {
        success: false,
        score,
        message: 'Erreur analyse performance',
        details: [error.message]
      }
    }

    return {
      success: score >= 70,
      score,
      message: score >= 70 ? 'Performance correcte' : 'Optimisations performance requises',
      details: checks,
      fixes: score < 70 ? [
        'Int√©grer le cache dans le moteur de pricing',
        'Impl√©menter la pagination',
        'Optimiser les imports lourds'
      ] : undefined
    }
  }

  /**
   * Agent Build - V√©rifie les builds
   */
  private async buildAgent(): Promise<QualityResult> {
    const checks = []
    let score = 100
    
    try {
      console.log('  Build API...')
      
      // 1. Build de l'API
      try {
        execSync('npm run build --prefix apps/api', { 
          stdio: 'pipe', 
          cwd: this.rootDir,
          timeout: 120000 // 2 minutes max
        })
        checks.push('‚úÖ Build API r√©ussi')
      } catch (error) {
        score -= 40
        checks.push('‚ùå √âchec build API')
        console.log('Erreur build:', error.stdout?.toString().slice(0, 500))
      }
      
      // 2. Build des packages
      console.log('  Build packages...')
      try {
        execSync('npm run build --prefix packages/ui', { 
          stdio: 'pipe',
          cwd: this.rootDir,
          timeout: 60000 // 1 minute max
        })
        checks.push('‚úÖ Build packages r√©ussi')
      } catch (error) {
        score -= 20
        checks.push('‚ö†Ô∏è √âchec build packages')
      }
      
      // 3. V√©rifier les artifacts de build
      const buildDirs = [
        'apps/api/dist',
        'packages/ui/dist'
      ]
      
      for (const buildDir of buildDirs) {
        const fullPath = join(this.rootDir, buildDir)
        if (existsSync(fullPath)) {
          checks.push(`‚úÖ Artifacts build trouv√©s: ${buildDir}`)
        } else {
          score -= 15
          checks.push(`‚ùå Artifacts manquants: ${buildDir}`)
        }
      }
      
    } catch (error) {
      score = 0
      return {
        success: false,
        score,
        message: 'Erreur build syst√®me',
        details: [error.message]
      }
    }

    return {
      success: score >= 70,
      score,
      message: score >= 70 ? 'Build syst√®me OK' : 'Probl√®mes de build d√©tect√©s',
      details: checks,
      fixes: score < 70 ? [
        'Corriger les erreurs de compilation',
        'V√©rifier les d√©pendances',
        'Nettoyer le cache: npm run clean'
      ] : undefined
    }
  }

  /**
   * Agent Integration - Tests d'int√©gration
   */
  private async integrationAgent(): Promise<QualityResult> {
    const checks = []
    let score = 100
    
    try {
      // 1. V√©rifier que le module unifi√© compile
      const moduleUnifiedPath = join(this.pricingDir, 'pricing-unified.module.ts')
      if (existsSync(moduleUnifiedPath)) {
        checks.push('‚úÖ Module unifi√© trouv√©')
        
        // V√©rifier la syntaxe
        try {
          execSync(`npx tsc --noEmit ${moduleUnifiedPath}`, { stdio: 'pipe' })
          checks.push('‚úÖ Module unifi√© compile')
        } catch (error) {
          score -= 30
          checks.push('‚ùå Erreurs compilation module unifi√©')
        }
      } else {
        score -= 40
        checks.push('‚ùå Module unifi√© manquant')
      }
      
      // 2. V√©rifier les imports des services
      const requiredServices = [
        'PricingEngineService',
        'PricingCacheService',
        'PricingAnalyticsService'
      ]
      
      for (const service of requiredServices) {
        const servicePath = join(this.pricingDir, `services/${service.toLowerCase().replace('service', '')}.service.ts`)
        if (existsSync(servicePath)) {
          checks.push(`‚úÖ Service trouv√©: ${service}`)
        } else {
          score -= 15
          checks.push(`‚ùå Service manquant: ${service}`)
        }
      }
      
      // 3. V√©rifier les migrations
      const migrationPath = join(this.rootDir, 'apps/api/src/core/database/migrations/auth/006-CreatePricingAnalyticsTables.ts')
      if (existsSync(migrationPath)) {
        checks.push('‚úÖ Migration pricing trouv√©e')
      } else {
        score -= 20
        checks.push('‚ùå Migration pricing manquante')
      }
      
      // 4. V√©rifier les contr√¥leurs
      const controllers = ['pricing.controller.ts', 'pricing-analytics.controller.ts']
      for (const controller of controllers) {
        const controllerPath = join(this.pricingDir, 'controllers', controller)
        if (existsSync(controllerPath)) {
          checks.push(`‚úÖ Contr√¥leur trouv√©: ${controller}`)
        } else {
          score -= 10
          checks.push(`‚ö†Ô∏è Contr√¥leur manquant: ${controller}`)
        }
      }
      
    } catch (error) {
      score = 0
      return {
        success: false,
        score,
        message: 'Erreur test int√©gration',
        details: [error.message]
      }
    }

    return {
      success: score >= 80,
      score,
      message: score >= 80 ? 'Int√©gration excellente' : 'Probl√®mes d\'int√©gration',
      details: checks,
      fixes: score < 80 ? [
        'Cr√©er les services manquants',
        'Ajouter les contr√¥leurs manquants',
        'V√©rifier les imports'
      ] : undefined
    }
  }

  /**
   * G√©n√®re le rapport final
   */
  private async generateReport(totalScore: number, maxScore: number): Promise<void> {
    const overallScore = Math.round((totalScore / maxScore) * 100)
    
    console.log(colors.cyan('\n' + '‚ïê'.repeat(60)))
    console.log(colors.cyan('                  RAPPORT FINAL                  '))
    console.log(colors.cyan('‚ïê'.repeat(60)))
    
    // Score global
    const scoreColor = overallScore >= 80 ? colors.green : 
                      overallScore >= 60 ? colors.yellow : colors.red
    console.log(scoreColor(`\nüéØ Score Global: ${overallScore}/100`))
    
    // Statut global
    let status = '‚ùå √âCHEC'
    let statusColor = colors.red
    if (overallScore >= 80) {
      status = '‚úÖ EXCELLENT'
      statusColor = colors.green
    } else if (overallScore >= 60) {
      status = '‚ö†Ô∏è  ACCEPTABLE'
      statusColor = colors.yellow
    }
    
    console.log(statusColor(`üèÜ Statut: ${status}\n`))
    
    // D√©tail par agent
    console.log(colors.blue('üìä D√©tail par Agent:'))
    console.log(colors.gray('‚îÄ'.repeat(40)))
    
    for (const [name, result] of this.results.entries()) {
      const icon = result.success ? '‚úÖ' : '‚ùå'
      const color = result.success ? colors.green : colors.red
      console.log(color(`${icon} ${name}: ${result.score}/100`))
    }
    
    // Recommandations
    console.log(colors.blue('\nüí° Recommandations:'))
    console.log(colors.gray('‚îÄ'.repeat(30)))
    
    const failedAgents = Array.from(this.results.entries())
      .filter(([_, result]) => !result.success)
    
    if (failedAgents.length === 0) {
      console.log(colors.green('üéâ Syst√®me pr√™t pour la production!'))
    } else {
      console.log(colors.yellow(`‚ö†Ô∏è  ${failedAgents.length} agents en √©chec:`))
      
      for (const [name, result] of failedAgents) {
        console.log(colors.red(`  ‚Ä¢ ${name}`))
        if (result.fixes) {
          result.fixes.forEach(fix => {
            console.log(colors.cyan(`    ‚ö° ${fix}`))
          })
        }
      }
    }
    
    // G√©n√©ration du fichier rapport
    const reportData = {
      timestamp: new Date().toISOString(),
      overallScore,
      status: overallScore >= 60,
      agents: Object.fromEntries(this.results.entries())
    }
    
    const reportPath = join(this.rootDir, 'quality-report.json')
    writeFileSync(reportPath, JSON.stringify(reportData, null, 2))
    console.log(colors.blue(`\nüìÑ Rapport sauvegard√©: ${reportPath}`))
    
    // Exit code bas√© sur le score
    process.exit(overallScore >= 60 ? 0 : 1)
  }
}

// Lancement du script
if (require.main === module) {
  const orchestrator = new PricingQualityOrchestrator()
  orchestrator.run().catch(error => {
    console.error(colors.red('‚ùå Erreur fatale:'), error)
    process.exit(1)
  })
}