#!/usr/bin/env pwsh
# =========================================================================
# ERP TOPSTEEL - GESTIONNAIRE SQL CENTRALIS√â
# =========================================================================

param(
    [Parameter(Mandatory)]
    [ValidateSet('status', 'schema', 'indexes', 'triggers', 'views', 'seed', 'backup', 'restore', 'reset', 'full', 'maintenance')]
    [string]$Action,
    [string]$File = "",
    [string]$DBHost = "localhost",
    [string]$DBUser = "postgres", 
    [string]$DBName = "erp_topsteel",
    [string]$DBPassword = "postgres"
)

$env:PGPASSWORD = $DBPassword

function Execute-SQL {
    param([string]$SqlFile, [string]$Description)
    
    if (-not (Test-Path $SqlFile)) {
        Write-Host "‚ùå Fichier introuvable: $SqlFile" -ForegroundColor Red
        return $false
    }
    
    Write-Host "üîÑ Ex√©cution: $Description..." -ForegroundColor Yellow
    $result = psql -h $DBHost -U $DBUser -d $DBName -f $SqlFile 2>&1
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ $Description termin√©" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚ùå Erreur dans $Description" -ForegroundColor Red
        Write-Host $result -ForegroundColor Red
        return $false
    }
}

switch ($Action) {
    'status' {
        Write-Host "üìä √âtat de la base '$DBName':" -ForegroundColor Cyan
        psql -h $DBHost -U $DBUser -d $DBName -c "\dt"
        psql -h $DBHost -U $DBUser -d $DBName -c "SELECT schemaname, tablename, tableowner FROM pg_tables WHERE schemaname = 'public';"
    }
    'schema' {
        Execute-SQL "sql/schemas/01-main-schema.sql" "Cr√©ation du sch√©ma"
    }
    'indexes' {
        Execute-SQL "sql/indexes/01-performance-indexes.sql" "Cr√©ation des index"
    }
    'triggers' {
        Execute-SQL "sql/triggers/01-audit-triggers.sql" "Cr√©ation des triggers"
    }
    'views' {
        Execute-SQL "sql/views/01-business-views.sql" "Cr√©ation des vues"
    }
    'seed' {
        Execute-SQL "sql/seeds/01-sample-data.sql" "Chargement des donn√©es de test"
    }
    'full' {
        Write-Host "üöÄ Setup complet de la base de donn√©es..." -ForegroundColor Cyan
        $success = $true
        $success = $success -and (Execute-SQL "sql/schemas/01-main-schema.sql" "Sch√©ma principal")
        $success = $success -and (Execute-SQL "sql/indexes/01-performance-indexes.sql" "Index de performance")
        $success = $success -and (Execute-SQL "sql/triggers/01-audit-triggers.sql" "Triggers d'audit")
        $success = $success -and (Execute-SQL "sql/views/01-business-views.sql" "Vues m√©tier")
        $success = $success -and (Execute-SQL "sql/seeds/01-sample-data.sql" "Donn√©es de test")
        
        if ($success) {
            Write-Host "üéâ Setup complet termin√© avec succ√®s!" -ForegroundColor Green
        }
    }
    'backup' {
        $backupFile = if ($File) { $File } else { "sql/backups/backup-$(Get-Date -Format 'yyyyMMdd-HHmmss').sql" }
        Write-Host "üíæ Sauvegarde vers $backupFile..." -ForegroundColor Yellow
        
        if (-not (Test-Path "sql/backups")) {
            New-Item -ItemType Directory -Path "sql/backups" -Force | Out-Null
        }
        
        pg_dump -h $DBHost -U $DBUser $DBName > $backupFile
        Write-Host "‚úÖ Sauvegarde termin√©e" -ForegroundColor Green
    }
    'restore' {
        if (-not $File) {
            Write-Host "‚ùå Sp√©cifiez un fichier: -File backup.sql" -ForegroundColor Red
            exit 1
        }
        Write-Host "üì• Restauration depuis $File..." -ForegroundColor Yellow
        psql -h $DBHost -U $DBUser -d $DBName < $File
        Write-Host "‚úÖ Restauration termin√©e" -ForegroundColor Green
    }
    'reset' {
        Write-Host "‚ö†Ô∏è ATTENTION: Ceci va supprimer toutes les donn√©es!" -ForegroundColor Red
        $confirm = Read-Host "Tapez 'RESET' pour confirmer"
        if ($confirm -eq 'RESET') {
            Write-Host "üîÑ Reset de la base de donn√©es..." -ForegroundColor Yellow
            psql -h $DBHost -U $DBUser -d postgres -c "DROP DATABASE IF EXISTS $DBName; CREATE DATABASE $DBName;"
            
            # Re-setup complet
            & $PSCommandPath -Action full -DBHost $DBHost -DBUser $DBUser -DBName $DBName -DBPassword $DBPassword
        }
    }
    'maintenance' {
        Execute-SQL "sql/maintenance/01-cleanup-scripts.sql" "Scripts de maintenance"
    }
}

$env:PGPASSWORD = $null
