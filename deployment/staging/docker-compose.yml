version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: topsteel-staging-db
    environment:
      POSTGRES_DB: topsteel_marketplace_staging
      POSTGRES_USER: topsteel_staging
      POSTGRES_PASSWORD: ${DB_PASSWORD_STAGING}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - topsteel-staging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U topsteel_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: topsteel-staging-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD_STAGING}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
    volumes:
      - redis_staging_data:/data
    ports:
      - "6380:6379"
    networks:
      - topsteel-staging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: ../../
      dockerfile: deployment/staging/Dockerfile.api
      args:
        NODE_ENV: staging
    container_name: topsteel-staging-api
    environment:
      NODE_ENV: staging
      PORT: 3001
      DATABASE_URL: postgresql://topsteel_staging:${DB_PASSWORD_STAGING}@postgres:5432/topsteel_marketplace_staging
      REDIS_URL: redis://:${REDIS_PASSWORD_STAGING}@redis:6379
      JWT_SECRET: ${JWT_SECRET_STAGING}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY_STAGING}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET_STAGING}
      SENTRY_DSN: ${SENTRY_DSN_STAGING}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: topsteel-marketplace-staging
      CORS_ORIGINS: https://staging.topsteel.com
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - topsteel-staging
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  web:
    build:
      context: ../../
      dockerfile: deployment/staging/Dockerfile.web
      args:
        NEXT_PUBLIC_API_URL: https://staging-api.topsteel.com
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY_STAGING}
    container_name: topsteel-staging-web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://staging-api.topsteel.com
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY_STAGING}
      NEXT_PUBLIC_SENTRY_DSN: ${SENTRY_DSN_STAGING}
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - topsteel-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  nginx:
    image: nginx:alpine
    container_name: topsteel-staging-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - web
    networks:
      - topsteel-staging
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: topsteel-staging-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    networks:
      - topsteel-staging
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: topsteel-staging-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3100:3000"
    depends_on:
      - prometheus
    networks:
      - topsteel-staging
    restart: unless-stopped

networks:
  topsteel-staging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_staging_data:
  redis_staging_data:
  prometheus_data:
  grafana_data:
  nginx_cache: