import { Injectable, Logger, type OnModuleInit } from '@nestjs/common'
import type { ConfigService } from '@nestjs/config'
import type { DatabaseHealthService } from './health.service'
import type { MigrationService } from './migration.service'
import type { MigrationLoaderService } from './migration-loader.service'
import type { SeederService } from './seeder.service'

@Injectable()
export class DatabaseStartupService implements OnModuleInit {
  private readonly logger = new Logger(DatabaseStartupService.name)
  private readonly isDevelopment: boolean
  private readonly isProduction: boolean

  constructor(
    private readonly configService: ConfigService,
    private readonly migrationService: MigrationService,
    private readonly seederService: SeederService,
    private readonly healthService: DatabaseHealthService,
    private readonly migrationLoaderService: MigrationLoaderService
  ) {
    this.isDevelopment = this.configService.get('NODE_ENV') === 'development'
    this.isProduction = this.configService.get('NODE_ENV') === 'production'
  }

  async onModuleInit(): Promise<void> {
    try {
      this.logger.log('üöÄ Initialisation de la base de donn√©es...')

      // 1. V√©rifier la connexion de base (sans requ√™tes sur les tables)
      await this.checkBasicConnection()

      // 2. Ex√©cuter les migrations si n√©cessaire
      await this.handleMigrations()

      // 3. Ex√©cuter les seeds si n√©cessaire
      await this.handleSeeds()

      // 4. V√©rification finale compl√®te
      await this.finalHealthCheck()

      this.logger.log('‚úÖ Base de donn√©es pr√™te')
    } catch (error) {
      this.logger.error("‚ùå Erreur lors de l'initialisation de la base de donn√©es:", error)

      // En production, on ne veut pas que l'app crash
      if (this.isProduction) {
        this.logger.error('‚ö†Ô∏è  Application d√©marr√©e en mode d√©grad√©')
      } else {
        throw error
      }
    }
  }

  /**
   * V√©rifie la connexion de base sans requ√™tes sur les tables
   */
  private async checkBasicConnection(): Promise<void> {
    this.logger.log('üîç V√©rification de la connexion de base...')

    const metrics = await this.healthService.getBasicMetrics()

    if (!metrics.isConnected) {
      this.logger.error('‚ùå Connexion √† la base de donn√©es impossible')
      throw new Error('Database connection failed')
    }

    this.logger.log(`‚úÖ Connexion √©tablie`)
    this.logger.log(`üìä Temps de r√©ponse: ${metrics.responseTime}ms`)
  }

  /**
   * G√®re les migrations
   */
  private async handleMigrations(): Promise<void> {
    this.logger.log('üîÑ V√©rification des migrations...')

    if (this.isDevelopment) {
      // En d√©veloppement, on peut ex√©cuter les migrations automatiquement
      const autoRunMigrations = this.configService.get<boolean>('AUTO_RUN_MIGRATIONS', true) // Default to true

      if (autoRunMigrations) {
        this.logger.log('üîÑ Ex√©cution automatique des migrations (d√©veloppement)')

        // Utiliser le MigrationLoaderService pour une approche plus robuste
        try {
          await this.migrationLoaderService.ensureMigrations()
        } catch (_error) {
          this.logger.warn(
            '‚ö†Ô∏è  √âchec du MigrationLoaderService, essai avec MigrationService standard'
          )
          await this.migrationService.runPendingMigrations()
        }
      } else {
        // Juste v√©rifier s'il y a des migrations en attente
        const status = await this.migrationService.getMigrationStatus()

        if (status.pending.length > 0) {
          this.logger.warn(`‚ö†Ô∏è  ${status.pending.length} migration(s) en attente`)
          this.logger.warn('üí° Utilisez npm run migration:run pour les ex√©cuter')
        }
      }
    } else {
      // En production, on ne fait que v√©rifier
      const isUpToDate = await this.migrationService.isDatabaseUpToDate()

      if (!isUpToDate) {
        this.logger.warn('‚ö†Ô∏è  Migrations en attente en production')
        this.logger.warn('üí° D√©finir ALLOW_PRODUCTION_MIGRATIONS=true pour autoriser')
      }
    }
  }

  /**
   * G√®re les seeds
   */
  private async handleSeeds(): Promise<void> {
    const autoRunSeeds = this.configService.get<boolean>('AUTO_RUN_SEEDS', this.isDevelopment)

    if (autoRunSeeds) {
      this.logger.log("üå± V√©rification des donn√©es d'initialisation...")
      await this.seederService.runSeeds()
    } else {
      this.logger.log('‚è≠Ô∏è  Seeds d√©sactiv√©s')
    }
  }

  /**
   * V√©rification finale
   */
  private async finalHealthCheck(): Promise<void> {
    const metrics = await this.healthService.getBasicMetrics()

    this.logger.log(`üìà Connexions actives: ${metrics.connectionCount}`)
    this.logger.log(`‚è±Ô∏è  Temps de r√©ponse: ${metrics.responseTime}ms`)

    if (!metrics.isConnected) {
      this.logger.error('‚ùå Perte de connexion d√©tect√©e apr√®s initialisation')
      throw new Error('Database connection lost')
    }
  }

  /**
   * M√©thode pour r√©initialiser en d√©veloppement
   */
  async resetDevelopmentDatabase(): Promise<void> {
    if (!this.isDevelopment) {
      throw new Error('Reset interdit en production')
    }

    this.logger.warn('üîÑ R√©initialisation de la base de d√©veloppement...')

    try {
      // Reset des seeds
      await this.seederService.resetSeeds()

      // Rollback des migrations (si n√©cessaire)
      // await this.migrationService.revertAllMigrations()

      // Re-run des migrations
      await this.migrationService.runPendingMigrations()

      // Re-run des seeds
      await this.seederService.runSeeds()

      this.logger.log('‚úÖ Base de d√©veloppement r√©initialis√©e')
    } catch (error) {
      this.logger.error('‚ùå Erreur lors de la r√©initialisation:', error)
      throw error
    }
  }
}
