#!/usr/bin/env ts-node
/**
 * Script de rollback pour la migration des menus
 * Permet de revenir √† l'√©tat pr√©c√©dent en cas de probl√®me
 */

import { DataSource } from 'typeorm'
import { DatabaseConfig } from '../database/database.config.standalone'

async function rollbackMenuMigration() {
  console.log('üîÑ Rollback de la migration des menus...\n')

  const dataSource = new DataSource(DatabaseConfig.getAuthConfig())
  
  try {
    await dataSource.initialize()
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie')

    // V√©rifier si les nouvelles colonnes existent
    const columns = await dataSource.query(`
      SELECT column_name
      FROM information_schema.columns 
      WHERE table_name = 'menu_items' 
      AND column_name IN ('type', 'program_id', 'external_url', 'query_builder_id')
    `)

    if (columns.length === 0) {
      console.log('‚ÑπÔ∏è  Aucune colonne de migration trouv√©e - pas de rollback n√©cessaire')
      return
    }

    console.log('üìã Colonnes √† supprimer:')
    columns.forEach((col: any) => console.log(`  - ${col.column_name}`))

    // Sauvegarder les donn√©es importantes avant le rollback
    const menuItemsWithData = await dataSource.query(`
      SELECT id, title, href, program_id, external_url, query_builder_id, type
      FROM menu_items 
      WHERE program_id IS NOT NULL 
         OR external_url IS NOT NULL 
         OR query_builder_id IS NOT NULL
    `)

    if (menuItemsWithData.length > 0) {
      console.log('\n‚ö†Ô∏è  Attention: Des donn√©es sp√©cifiques aux nouveaux types seront perdues:')
      menuItemsWithData.forEach((item: any) => {
        console.log(`  - ${item.title}:`)
        if (item.program_id && item.program_id !== item.href) {
          console.log(`    ‚Ä¢ program_id: ${item.program_id}`)
        }
        if (item.external_url) {
          console.log(`    ‚Ä¢ external_url: ${item.external_url}`)
        }
        if (item.query_builder_id) {
          console.log(`    ‚Ä¢ query_builder_id: ${item.query_builder_id}`)
        }
      })
      
      console.log('\n‚ìò  Ces donn√©es seront conserv√©es dans href si possible')
    }

    // Demander confirmation (simulation - en production, utiliser readline)
    console.log('\n‚ùì √ätes-vous s√ªr de vouloir effectuer le rollback ?')
    console.log('   Cette action supprimera les nouvelles colonnes et leurs donn√©es.')
    
    // En production, vous devriez ajouter une vraie confirmation
    // Pour ce script, on continue automatiquement
    console.log('   ‚Üí Proceeding with rollback...\n')

    // Restaurer les href depuis program_id si n√©cessaire
    const itemsToRestore = await dataSource.query(`
      SELECT id, href, program_id
      FROM menu_items 
      WHERE program_id IS NOT NULL 
        AND (href IS NULL OR href = '')
    `)

    if (itemsToRestore.length > 0) {
      console.log('üîÑ Restauration des href depuis program_id...')
      for (const item of itemsToRestore) {
        await dataSource.query(`
          UPDATE menu_items 
          SET href = $1 
          WHERE id = $2
        `, [item.program_id, item.id])
        console.log(`  ‚úÖ ${item.id}: href restaur√© √† ${item.program_id}`)
      }
    }

    // Supprimer les colonnes dans l'ordre inverse
    const columnsToDelete = ['query_builder_id', 'external_url', 'program_id', 'type']
    
    for (const columnName of columnsToDelete) {
      try {
        await dataSource.query(`ALTER TABLE menu_items DROP COLUMN IF EXISTS ${columnName}`)
        console.log(`‚úÖ Colonne ${columnName} supprim√©e`)
      } catch (error) {
        console.log(`‚ö†Ô∏è  Erreur lors de la suppression de ${columnName}:`, error)
      }
    }

    // V√©rifier que le rollback a r√©ussi
    const remainingColumns = await dataSource.query(`
      SELECT column_name
      FROM information_schema.columns 
      WHERE table_name = 'menu_items' 
      AND column_name IN ('type', 'program_id', 'external_url', 'query_builder_id')
    `)

    if (remainingColumns.length === 0) {
      console.log('\nüéâ Rollback termin√© avec succ√®s!')
      console.log('   La table menu_items est revenue √† son √©tat pr√©c√©dent.')
    } else {
      console.log('\n‚ö†Ô∏è  Rollback partiellement r√©ussi. Colonnes restantes:')
      remainingColumns.forEach((col: any) => console.log(`  - ${col.column_name}`))
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du rollback:', error)
  } finally {
    await dataSource.destroy()
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  rollbackMenuMigration().catch(console.error)
}

export { rollbackMenuMigration }