#!/usr/bin/env ts-node

/**
 * Script de rollback d'urgence pour la migration multi-tenant
 * Permet de revenir √† l'√©tat pr√©c√©dent en cas de probl√®me
 */

import { DataSource } from 'typeorm'
import { config } from 'dotenv'
import * as path from 'path'
import * as fs from 'fs'
import { exec } from 'child_process'
import { promisify } from 'util'

// Charger les variables d'environnement
config({ path: path.join(__dirname, '../../../.env') })

const execAsync = promisify(exec)

interface RollbackStep {
  name: string
  description: string
  execute: () => Promise<void>
  critical: boolean
}

class MigrationRollback {
  private currentDataSource: DataSource
  private completedSteps: string[] = []

  constructor() {
    this.currentDataSource = new DataSource({
      type: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      username: process.env.DB_USERNAME || 'postgres',
      password: process.env.DB_PASSWORD || 'postgres',
      database: process.env.DB_NAME || 'erp_topsteel',
    })
  }

  async initialize(): Promise<void> {
    await this.currentDataSource.initialize()
    console.log('üîó Connexion √† la base de donn√©es √©tablie')
  }

  async destroy(): Promise<void> {
    if (this.currentDataSource.isInitialized) {
      await this.currentDataSource.destroy()
      console.log('üîå Connexion ferm√©e')
    }
  }

  /**
   * Trouve le backup le plus r√©cent
   */
  findLatestBackup(): string | null {
    const backupDir = path.join(__dirname, '../../../backups/pre-migration')
    
    if (!fs.existsSync(backupDir)) {
      console.log('‚ùå Dossier de sauvegarde non trouv√©')
      return null
    }

    const backupFiles = fs.readdirSync(backupDir)
      .filter(file => file.includes('_full_') && file.endsWith('.sql'))
      .sort()
      .reverse()

    if (backupFiles.length === 0) {
      console.log('‚ùå Aucun fichier de sauvegarde trouv√©')
      return null
    }

    const latestBackup = path.join(backupDir, backupFiles[0])
    console.log(`üìÅ Sauvegarde trouv√©e: ${backupFiles[0]}`)
    return latestBackup
  }

  /**
   * Supprime les nouvelles bases de donn√©es
   */
  async dropNewDatabases(): Promise<void> {
    console.log('üóëÔ∏è Suppression des nouvelles bases de donn√©es...')

    const adminDataSource = new DataSource({
      type: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      username: process.env.DB_USERNAME || 'postgres',
      password: process.env.DB_PASSWORD || 'postgres',
      database: 'postgres',
    })

    await adminDataSource.initialize()

    try {
      const newDatabases = [
        process.env.DB_AUTH_NAME || 'erp_topsteel_auth',
        process.env.DB_SHARED_NAME || 'erp_topsteel_shared',
        'erp_topsteel_topsteel' // Base tenant par d√©faut
      ]

      for (const dbName of newDatabases) {
        try {
          // Terminer toutes les connexions actives
          await adminDataSource.query(`
            SELECT pg_terminate_backend(pid)
            FROM pg_stat_activity
            WHERE datname = '${dbName}' AND pid <> pg_backend_pid()
          `)

          // Supprimer la base
          await adminDataSource.query(`DROP DATABASE IF EXISTS "${dbName}"`)
          console.log(`   ‚úì Base supprim√©e: ${dbName}`)
        } catch (error) {
          console.log(`   ‚ö†Ô∏è Erreur lors de la suppression de ${dbName}:`, (error as Error).message)
        }
      }
    } finally {
      await adminDataSource.destroy()
    }
  }

  /**
   * Restaure la base de donn√©es originale
   */
  async restoreOriginalDatabase(backupFile: string): Promise<void> {
    console.log('üîÑ Restauration de la base de donn√©es originale...')

    const dbName = process.env.DB_NAME || 'erp_topsteel'

    try {
      // Terminer toutes les connexions actives
      const adminDataSource = new DataSource({
        type: 'postgres',
        host: process.env.DB_HOST || 'localhost',
        port: parseInt(process.env.DB_PORT || '5432'),
        username: process.env.DB_USERNAME || 'postgres',
        password: process.env.DB_PASSWORD || 'postgres',
        database: 'postgres',
      })

      await adminDataSource.initialize()

      await adminDataSource.query(`
        SELECT pg_terminate_backend(pid)
        FROM pg_stat_activity
        WHERE datname = '${dbName}' AND pid <> pg_backend_pid()
      `)

      await adminDataSource.destroy()

      // Restaurer depuis le backup
      const restoreCommand = [
        'psql',
        `--host=${process.env.DB_HOST || 'localhost'}`,
        `--port=${process.env.DB_PORT || '5432'}`,
        `--username=${process.env.DB_USERNAME || 'postgres'}`,
        `--dbname=${dbName}`,
        `--file=${backupFile}`,
        '--single-transaction',
        '--verbose'
      ].join(' ')

      console.log('   üìã Ex√©cution de la restauration...')
      const env = { ...process.env, PGPASSWORD: process.env.DB_PASSWORD || 'postgres' }
      await execAsync(restoreCommand, { env })

      console.log('   ‚úÖ Base de donn√©es restaur√©e avec succ√®s')

    } catch (error) {
      console.error('   ‚ùå Erreur lors de la restauration:', (error as Error).message)
      throw error
    }
  }

  /**
   * Nettoie les fichiers de configuration multi-tenant
   */
  async cleanupConfiguration(): Promise<void> {
    console.log('üßπ Nettoyage de la configuration...')

    // Lister les fichiers √† nettoyer (optionnel)
    const configPaths = [
      path.join(__dirname, '../../modules/database/database-multi-tenant.module.ts'),
      path.join(__dirname, '../../database/config/multi-tenant-database.config.ts')
    ]

    configPaths.forEach(filePath => {
      if (fs.existsSync(filePath)) {
        console.log(`   ‚ÑπÔ∏è Configuration multi-tenant trouv√©e: ${path.basename(filePath)}`)
        console.log('   üí° Vous pouvez d√©sactiver le module multi-tenant dans app.module.ts')
      }
    })

    console.log('   ‚úÖ V√©rification de la configuration termin√©e')
  }

  /**
   * Processus complet de rollback
   */
  async runRollback(options: { force?: boolean } = {}): Promise<void> {
    console.log('üö® D√âMARRAGE DU ROLLBACK DE MIGRATION')
    console.log(`‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer les nouvelles bases de donn√©es !`)
    console.log('=' + '='.repeat(59))

    if (!options.force) {
      console.log('‚ùå Pour des raisons de s√©curit√©, ce script n√©cessite le flag --force')
      console.log('   Utilisation: npm run rollback-migration -- --force')
      return
    }

    try {
      await this.initialize()

      // 1. Trouver le backup
      const backupFile = this.findLatestBackup()
      if (!backupFile) {
        throw new Error('Aucun fichier de sauvegarde disponible pour le rollback')
      }

      // 2. Supprimer les nouvelles bases
      await this.dropNewDatabases()

      // 3. Restaurer la base originale
      await this.restoreOriginalDatabase(backupFile)

      // 4. Nettoyer la configuration
      await this.cleanupConfiguration()

      console.log('\\nüéâ ROLLBACK TERMIN√â AVEC SUCC√àS!')
      console.log('üìã Actions effectu√©es:')
      console.log('   ‚úì Nouvelles bases de donn√©es supprim√©es')
      console.log('   ‚úì Base de donn√©es originale restaur√©e')
      console.log('   ‚úì Configuration v√©rifi√©e')
      console.log('\\nüí° Actions recommand√©es:')
      console.log('   ‚Ä¢ Red√©marrer l\'application')
      console.log('   ‚Ä¢ V√©rifier que tout fonctionne correctement')
      console.log('   ‚Ä¢ Analyser les logs pour comprendre la cause du probl√®me')

    } catch (error) {
      console.error('\\nüí• ERREUR LORS DU ROLLBACK')
      console.error('Erreur:', error)
      console.log('\\nüö® ACTIONS D\'URGENCE:')
      console.log('   1. Contactez l\'administrateur syst√®me')
      console.log('   2. V√©rifiez manuellement l\'√©tat des bases de donn√©es')
      console.log('   3. Restaurez manuellement depuis le backup si n√©cessaire')
      throw error
    } finally {
      await this.destroy()
    }
  }

  /**
   * Validation avant rollback
   */
  async validateRollback(): Promise<boolean> {
    console.log('üîç Validation des conditions de rollback...')

    try {
      await this.initialize()

      // V√©rifier si les nouvelles bases existent
      const adminDataSource = new DataSource({
        type: 'postgres',
        host: process.env.DB_HOST || 'localhost',
        port: parseInt(process.env.DB_PORT || '5432'),
        username: process.env.DB_USERNAME || 'postgres',
        password: process.env.DB_PASSWORD || 'postgres',
        database: 'postgres',
      })

      await adminDataSource.initialize()

      const newDatabases = [
        process.env.DB_AUTH_NAME || 'erp_topsteel_auth',
        process.env.DB_SHARED_NAME || 'erp_topsteel_shared'
      ]

      let newDbsExist = 0
      for (const dbName of newDatabases) {
        const result = await adminDataSource.query(
          'SELECT 1 FROM pg_database WHERE datname = $1', [dbName]
        )
        if (result.length > 0) {
          newDbsExist++
          console.log(`   ‚úì Base trouv√©e: ${dbName}`)
        }
      }

      await adminDataSource.destroy()

      if (newDbsExist === 0) {
        console.log('   ‚ÑπÔ∏è Aucune nouvelle base de donn√©es trouv√©e - rollback peut-√™tre inutile')
        return false
      }

      // V√©rifier la disponibilit√© du backup
      const backupFile = this.findLatestBackup()
      if (!backupFile) {
        console.log('   ‚ùå Aucun backup disponible - rollback impossible')
        return false
      }

      console.log('   ‚úÖ Conditions de rollback valid√©es')
      return true

    } catch (error) {
      console.error('   ‚ùå Erreur lors de la validation:', (error as Error).message)
      return false
    } finally {
      await this.destroy()
    }
  }
}

// Ex√©cution du script
if (require.main === module) {
  const args = process.argv.slice(2)
  const force = args.includes('--force')
  const validateOnly = args.includes('--validate')

  const rollback = new MigrationRollback()

  if (validateOnly) {
    rollback.validateRollback()
      .then(canRollback => {
        if (canRollback) {
          console.log('\\n‚úÖ Rollback possible.')
          process.exit(0)
        } else {
          console.log('\\n‚ùå Rollback non possible ou non n√©cessaire.')
          process.exit(1)
        }
      })
      .catch(error => {
        console.error('‚ùå Erreur lors de la validation:', error)
        process.exit(1)
      })
  } else {
    rollback.runRollback({ force })
      .then(() => {
        console.log('\\n‚úÖ Rollback termin√©.')
        process.exit(0)
      })
      .catch(error => {
        console.error('‚ùå Erreur fatale:', error)
        process.exit(1)
      })
  }
}

export { MigrationRollback }