#!/usr/bin/env ts-node

/**
 * Script de test complet avec cr√©ation de bases de donn√©es topsteel_test_*
 * Test de bout en bout de la migration multi-tenant
 */

import { DataSource } from 'typeorm'
import { config } from 'dotenv'
import * as path from 'path'
import * as fs from 'fs'
import { MigrationService } from './migration-service'
import { MigrationIntegrityValidator } from './validate-migration-integrity'

// Charger les variables d'environnement
config({ path: path.join(__dirname, '../../../.env') })

interface TestDatabases {
  original: string
  testCopy: string
  auth: string
  shared: string
  tenant: string
}

/**
 * Service de migration personnalis√© pour les tests
 * Permet de surcharger le nom de la base tenant
 */
class TestMigrationService extends MigrationService {
  constructor(private tenantDbName: string) {
    super()
    
    // Reconfigurer la source de donn√©es tenant avec le bon nom
    ;(this as any).tenantDataSource = new DataSource({
      type: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      username: process.env.DB_USERNAME || 'postgres',
      password: process.env.DB_PASSWORD || 'postgres',
      database: tenantDbName,
      migrations: [path.join(__dirname, '../../database/migrations/tenant/*.ts')],
      migrationsRun: false
    })
  }

  /**
   * Cr√©er les nouvelles bases de donn√©es - version surcharg√©e pour le test
   */
  async createDatabases(): Promise<void> {
    console.log('üóÑÔ∏è Cr√©ation des nouvelles bases de donn√©es...')
    
    const adminDataSource = new DataSource({
      type: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      username: process.env.DB_USERNAME || 'postgres',
      password: process.env.DB_PASSWORD || 'postgres',
      database: 'postgres', // Base admin
    })

    await adminDataSource.initialize()

    try {
      const databases = [
        process.env.DB_AUTH_NAME || 'erp_topsteel_auth',
        process.env.DB_SHARED_NAME || 'erp_topsteel_shared',
        this.tenantDbName // Utiliser le nom de test
      ]

      for (const dbName of databases) {
        try {
          await adminDataSource.query(`CREATE DATABASE "${dbName}" WITH ENCODING 'UTF8'`)
          console.log(`   ‚úì Base cr√©√©e: ${dbName}`)
        } catch (error: any) {
          if (error.code === '42P04') {
            console.log(`   ‚ö†Ô∏è Base existe d√©j√†: ${dbName}`)
          } else {
            throw error
          }
        }
      }
    } finally {
      await adminDataSource.destroy()
    }
  }

  /**
   * Cr√©er la soci√©t√© par d√©faut - version surcharg√©e pour le test
   */
  async createDefaultCompany(): Promise<string> {
    console.log('üè¢ Cr√©ation de la soci√©t√© par d√©faut...')
    
    const authDataSource = (this as any).authDataSource
    
    const societeId = await authDataSource.query(`
      INSERT INTO societes (
        nom, code, database_name, status, plan,
        max_users, max_sites, configuration
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING id
    `, [
      'TopSteel',
      'TOPSTEEL',
      this.tenantDbName, // Utiliser le nom de test
      'ACTIVE',
      'ENTERPRISE',
      100,
      10,
      JSON.stringify({
        modules: ['stocks', 'production', 'clients', 'commandes'],
        features: ['multi_site', 'advanced_reporting'],
        locale: 'fr-FR',
        timezone: 'Europe/Paris'
      })
    ])
    
    const companyId = societeId[0].id
    console.log(`   ‚úì Soci√©t√© cr√©√©e avec ID: ${companyId}`)
    
    // Cr√©er le site principal
    await authDataSource.query(`
      INSERT INTO sites (
        societe_id, nom, code, type, is_principal, actif
      ) VALUES ($1, $2, $3, $4, $5, $6)
    `, [companyId, 'Site Principal TopSteel', 'MAIN', 'MIXED', true, true])
    
    console.log('   ‚úì Site principal cr√©√©')
    
    return companyId
  }
}

class TopSteelMigrationTester {
  private adminDataSource: DataSource
  private testDatabases: TestDatabases
  private originalEnv: any

  constructor() {
    this.adminDataSource = new DataSource({
      type: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      username: process.env.DB_USERNAME || 'postgres',
      password: process.env.DB_PASSWORD || 'postgres',
      database: 'postgres',
    })

    // Utiliser des noms fixes pour les tests concrets
    this.testDatabases = {
      original: process.env.DB_NAME || 'erp_topsteel',
      testCopy: `topsteel_test_original`,
      auth: `topsteel_test_auth`,
      shared: `topsteel_test_shared`,
      tenant: `topsteel_test_societe1` // Utiliser societe1 comme exemple concret
    }

    // Sauvegarder l'environnement original
    this.originalEnv = {
      DB_NAME: process.env.DB_NAME,
      DB_AUTH_NAME: process.env.DB_AUTH_NAME,
      DB_SHARED_NAME: process.env.DB_SHARED_NAME
    }
  }

  async initialize(): Promise<void> {
    await this.adminDataSource.initialize()
    console.log('üîó Connexion administrateur √©tablie')
  }

  /**
   * Nettoyer toutes les bases de test existantes
   */
  async cleanupExistingTestDatabases(): Promise<void> {
    console.log('üßπ Nettoyage des bases de test existantes...')

    try {
      // Lister toutes les bases qui commencent par topsteel_test ou erp_topsteel (sauf erp_topsteel lui-m√™me)
      const testDbs = await this.adminDataSource.query(`
        SELECT datname FROM pg_database 
        WHERE (datname LIKE 'topsteel_test%' OR datname LIKE 'erp_topsteel_%') 
        AND datname != 'erp_topsteel'
      `)

      for (const db of testDbs) {
        const dbName = db.datname
        try {
          // Terminer toutes les connexions
          await this.adminDataSource.query(`
            SELECT pg_terminate_backend(pid)
            FROM pg_stat_activity
            WHERE datname = '${dbName}' AND pid <> pg_backend_pid()
          `)

          // Supprimer la base
          await this.adminDataSource.query(`DROP DATABASE IF EXISTS "${dbName}"`)
          console.log(`   üóëÔ∏è Base supprim√©e: ${dbName}`)
        } catch (error) {
          console.log(`   ‚ö†Ô∏è Erreur suppression ${dbName}:`, (error as Error).message)
        }
      }

      console.log('   ‚úÖ Nettoyage termin√©')
    } catch (error) {
      console.error('   ‚ùå Erreur lors du nettoyage:', (error as Error).message)
    }
  }

  async destroy(): Promise<void> {
    if (this.adminDataSource.isInitialized) {
      await this.adminDataSource.destroy()
    }
    console.log('üîå Connexion ferm√©e')
  }

  /**
   * Cr√©er une copie de la base originale pour le test
   */
  async createOriginalDatabaseCopy(): Promise<void> {
    console.log('üìã Cr√©ation de la copie de la base originale...')

    try {
      // Terminer toutes les connexions actives sur la base originale
      await this.adminDataSource.query(`
        SELECT pg_terminate_backend(pid)
        FROM pg_stat_activity
        WHERE datname = '${this.testDatabases.original}' AND pid <> pg_backend_pid()
      `)

      // Cr√©er la copie
      await this.adminDataSource.query(`
        CREATE DATABASE "${this.testDatabases.testCopy}" 
        WITH TEMPLATE "${this.testDatabases.original}" 
        OWNER ${process.env.DB_USERNAME || 'postgres'}
      `)

      console.log(`   ‚úÖ Copie cr√©√©e: ${this.testDatabases.testCopy}`)

    } catch (error) {
      console.error('   ‚ùå Erreur lors de la cr√©ation de la copie:', (error as Error).message)
      throw error
    }
  }

  /**
   * Configurer l'environnement de test
   */
  setupTestEnvironment(): void {
    console.log(`‚öôÔ∏è Configuration de l'environnement de test...`)

    // Configurer les variables d'environnement pour pointer vers les bases de test
    process.env.DB_NAME = this.testDatabases.testCopy
    process.env.DB_AUTH_NAME = this.testDatabases.auth
    process.env.DB_SHARED_NAME = this.testDatabases.shared

    console.log(`   üìä Base originale de test: ${this.testDatabases.testCopy}`)
    console.log(`   üîê Base AUTH de test: ${this.testDatabases.auth}`)
    console.log(`   üìã Base SHARED de test: ${this.testDatabases.shared}`)
    console.log(`   üè¢ Base SOCI√âT√â de test: ${this.testDatabases.tenant}`)
    console.log('   ‚úÖ Environnement de test configur√©')
  }

  /**
   * Restaurer l'environnement original
   */
  restoreOriginalEnvironment(): void {
    console.log(`üîÑ Restauration de l'environnement original...`)

    process.env.DB_NAME = this.originalEnv.DB_NAME
    process.env.DB_AUTH_NAME = this.originalEnv.DB_AUTH_NAME
    process.env.DB_SHARED_NAME = this.originalEnv.DB_SHARED_NAME

    console.log('   ‚úÖ Environnement original restaur√©')
  }

  /**
   * V√©rifier que les bases de test existent
   */
  async verifyTestDatabases(): Promise<void> {
    console.log('üîç V√©rification des bases de donn√©es de test...')

    const databasesToCheck = [
      { name: this.testDatabases.testCopy, type: 'ORIGINAL_COPY' },
      { name: this.testDatabases.auth, type: 'AUTH' },
      { name: this.testDatabases.shared, type: 'SHARED' },
      { name: this.testDatabases.tenant, type: 'SOCI√âT√â' }
    ]

    for (const db of databasesToCheck) {
      try {
        const exists = await this.adminDataSource.query(
          'SELECT 1 FROM pg_database WHERE datname = $1', [db.name]
        )
        
        if (exists.length > 0) {
          console.log(`   ‚úÖ ${db.type}: ${db.name}`)
        } else {
          console.log(`   ‚ùå ${db.type}: ${db.name} - N'EXISTE PAS`)
        }
      } catch (error) {
        console.error(`   ‚ùå Erreur v√©rification ${db.type}:`, (error as Error).message)
      }
    }
  }

  /**
   * Compter les enregistrements dans chaque base
   */
  async countRecordsInDatabases(): Promise<void> {
    console.log('üìä Comptage des enregistrements...')

    // Compter dans la base originale copi√©e
    const originalDS = new DataSource({
      type: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      username: process.env.DB_USERNAME || 'postgres',
      password: process.env.DB_PASSWORD || 'postgres',
      database: this.testDatabases.testCopy,
    })

    try {
      await originalDS.initialize()
      
      const usersCount = await originalDS.query('SELECT COUNT(*) as count FROM users WHERE deleted_at IS NULL')
      console.log(`   üë• Utilisateurs dans la copie originale: ${usersCount[0].count}`)

      // Compter d'autres tables si elles existent
      const businessTables = ['clients', 'fournisseurs', 'materiaux', 'stocks', 'commandes']
      for (const table of businessTables) {
        try {
          const count = await originalDS.query(`SELECT COUNT(*) as count FROM ${table} WHERE deleted_at IS NULL`)
          console.log(`   üì¶ ${table}: ${count[0].count}`)
        } catch {
          console.log(`   ‚ö†Ô∏è Table '${table}' n'existe pas`)
        }
      }

    } catch (error) {
      console.error('   ‚ùå Erreur lors du comptage:', (error as Error).message)
    } finally {
      if (originalDS.isInitialized) {
        await originalDS.destroy()
      }
    }
  }

  /**
   * Ex√©cuter la migration compl√®te
   */
  async runFullMigration(): Promise<boolean> {
    console.log('üöÄ Ex√©cution de la migration compl√®te...')

    try {
      // Cr√©er un service de migration personnalis√© pour le test
      const migrationService = new TestMigrationService(this.testDatabases.tenant)
      
      console.log('   üìã Initialisation des connexions...')
      await migrationService.initializeConnections()

      console.log('   üóÑÔ∏è Cr√©ation des nouvelles bases de donn√©es...')
      await migrationService.createDatabases()

      console.log('   üìä Ex√©cution des migrations de sch√©ma...')
      await migrationService.runMigrations()

      console.log('   üë• Migration des utilisateurs...')
      await migrationService.migrateUsers()

      console.log('   üè¢ Cr√©ation de la soci√©t√© par d√©faut...')
      const companyId = await migrationService.createDefaultCompany()

      console.log('   üì¶ Migration des donn√©es m√©tier...')
      await migrationService.migrateBusinessData(companyId)

      console.log('   üßπ Fermeture des connexions...')
      await migrationService.closeConnections()

      console.log('   ‚úÖ Migration compl√®te termin√©e avec succ√®s')
      return true

    } catch (error) {
      console.error('   ‚ùå Erreur lors de la migration:', (error as Error).message)
      console.error('   üìÑ D√©tails:', error)
      return false
    }
  }

  /**
   * Valider l'int√©grit√© de la migration
   */
  async validateMigrationIntegrity(): Promise<boolean> {
    console.log(`üîç Validation de l'int√©grit√© de la migration...`)

    try {
      const validator = new MigrationIntegrityValidator()
      
      // Adapter les sources de donn√©es pour pointer vers nos bases de test
      ;(validator as any).currentDataSource.options.database = this.testDatabases.testCopy
      ;(validator as any).authDataSource.options.database = this.testDatabases.auth
      ;(validator as any).sharedDataSource.options.database = this.testDatabases.shared
      ;(validator as any).tenantDataSource.options.database = this.testDatabases.tenant

      await validator.runValidation()

      console.log('   ‚úÖ Validation termin√©e')
      return true

    } catch (error) {
      console.error('   ‚ùå Erreur lors de la validation:', (error as Error).message)
      return false
    }
  }

  /**
   * Nettoyer les bases de donn√©es de test
   */
  async cleanupTestDatabases(options: { keepDatabases?: boolean } = {}): Promise<void> {
    if (options.keepDatabases) {
      console.log('üîí Conservation des bases de donn√©es de test pour analyse')
      console.log(`   üìã Copie originale: ${this.testDatabases.testCopy}`)
      console.log(`   üîê AUTH: ${this.testDatabases.auth}`)
      console.log(`   üìä SHARED: ${this.testDatabases.shared}`)
      console.log(`   üè¢ TENANT: ${this.testDatabases.tenant}`)
      return
    }

    console.log('üßπ Nettoyage des bases de donn√©es de test...')

    const testDatabases = [
      this.testDatabases.testCopy,
      this.testDatabases.auth,
      this.testDatabases.shared,
      this.testDatabases.tenant
    ]

    for (const dbName of testDatabases) {
      try {
        // V√©rifier si la base existe
        const exists = await this.adminDataSource.query(
          'SELECT 1 FROM pg_database WHERE datname = $1', [dbName]
        )

        if (exists.length > 0) {
          // Terminer toutes les connexions
          await this.adminDataSource.query(`
            SELECT pg_terminate_backend(pid)
            FROM pg_stat_activity
            WHERE datname = '${dbName}' AND pid <> pg_backend_pid()
          `)

          // Supprimer la base
          await this.adminDataSource.query(`DROP DATABASE "${dbName}"`)
          console.log(`   ‚úì Base supprim√©e: ${dbName}`)
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è Erreur lors de la suppression de ${dbName}:`, (error as Error).message)
      }
    }
  }

  /**
   * G√©n√©rer un rapport de test
   */
  generateTestReport(migrationSuccess: boolean, validationSuccess: boolean): void {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19)
    const reportFile = path.join(__dirname, '../../../backups/test', `topsteel_test_report_${timestamp}.json`)

    // Cr√©er le dossier si n√©cessaire
    const dir = path.dirname(reportFile)
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true })
    }

    const report = {
      timestamp: new Date().toISOString(),
      testType: 'FULL_MIGRATION_TEST_WITH_TOPSTEEL_PREFIX',
      testDatabases: this.testDatabases,
      results: {
        migrationSuccess,
        validationSuccess,
        overallSuccess: migrationSuccess && validationSuccess
      },
      conclusion: migrationSuccess && validationSuccess ? 'TEST_PASSED' : 'TEST_FAILED',
      recommendations: migrationSuccess && validationSuccess ? [
        'üéâ Test complet r√©ussi avec le pr√©fixe topsteel_test_',
        '‚úÖ La migration multi-tenant fonctionne parfaitement',
        'üöÄ Le syst√®me est pr√™t pour la migration en production',
        'üìã Proc√©der avec la migration r√©elle apr√®s sauvegarde'
      ] : [
        '‚ùå Le test a √©chou√© - ne pas migrer en production',
        'üîç Analyser les logs d\'erreur',
        'üõ†Ô∏è Corriger les probl√®mes identifi√©s',
        'üîÑ Relancer le test apr√®s corrections'
      ]
    }

    fs.writeFileSync(reportFile, JSON.stringify(report, null, 2))

    console.log('\\n' + '='.repeat(80))
    console.log('üìã RAPPORT DE TEST MIGRATION TOPSTEEL_TEST_*')
    console.log('='.repeat(80))
    console.log(`\\nüèóÔ∏è BASES DE DONN√âES DE TEST:`)
    console.log(`   üìã Copie originale: ${this.testDatabases.testCopy}`)
    console.log(`   üîê AUTH: ${this.testDatabases.auth}`)
    console.log(`   üìä SHARED: ${this.testDatabases.shared}`)
    console.log(`   üè¢ TENANT: ${this.testDatabases.tenant}`)
    
    console.log(`\\nüìä R√âSULTATS:`)
    console.log(`   Migration: ${migrationSuccess ? '‚úÖ R√âUSSIE' : '‚ùå √âCHOU√âE'}`)
    console.log(`   Validation: ${validationSuccess ? '‚úÖ R√âUSSIE' : '‚ùå √âCHOU√âE'}`)
    console.log(`   R√©sultat global: ${migrationSuccess && validationSuccess ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`)
    console.log(`   üìÅ Rapport: ${reportFile}`)

    if (migrationSuccess && validationSuccess) {
      console.log('\\nüéâ TEST TOPSTEEL_TEST_* R√âUSSI!')
      console.log('   üöÄ La migration multi-tenant est valid√©e et pr√™te pour la production!')
    } else {
      console.log('\\n‚ö†Ô∏è TEST TOPSTEEL_TEST_* √âCHOU√â!')
      console.log('   üõ†Ô∏è Des corrections sont n√©cessaires avant la migration en production.')
    }
  }

  /**
   * Ex√©cuter le test complet
   */
  async runCompleteTest(options: { keepDatabases?: boolean } = {}): Promise<void> {
    console.log('üß™ D√âMARRAGE DU TEST COMPLET TOPSTEEL_TEST_*')
    console.log('=' + '='.repeat(79))

    let migrationSuccess = false
    let validationSuccess = false

    try {
      await this.initialize()

      // 0. Nettoyer les bases existantes
      console.log('\\nüßπ √âTAPE 0: NETTOYAGE DES BASES EXISTANTES')
      await this.cleanupExistingTestDatabases()

      // 1. Cr√©er la copie de la base originale
      console.log('\\nüîÑ √âTAPE 1: CR√âATION DE LA COPIE DE BASE')
      await this.createOriginalDatabaseCopy()

      // 2. Configurer l'environnement de test
      console.log('\\n‚öôÔ∏è √âTAPE 2: CONFIGURATION DE L\'ENVIRONNEMENT')
      this.setupTestEnvironment()

      // 3. Compter les enregistrements initiaux
      console.log('\\nüìä √âTAPE 3: ANALYSE DES DONN√âES INITIALES')
      await this.countRecordsInDatabases()

      // 4. Ex√©cuter la migration
      console.log('\\nüöÄ √âTAPE 4: MIGRATION COMPL√àTE')
      migrationSuccess = await this.runFullMigration()

      // 5. V√©rifier les bases cr√©√©es
      console.log('\\nüîç √âTAPE 5: V√âRIFICATION DES BASES CR√â√âES')
      await this.verifyTestDatabases()

      // 6. Valider l'int√©grit√©
      if (migrationSuccess) {
        console.log('\\n‚úÖ √âTAPE 6: VALIDATION DE L\'INT√âGRIT√â')
        validationSuccess = await this.validateMigrationIntegrity()
      }

      // 7. G√©n√©rer le rapport
      console.log('\\nüìã √âTAPE 7: G√âN√âRATION DU RAPPORT')
      this.generateTestReport(migrationSuccess, validationSuccess)

    } catch (error) {
      console.error('\\nüí• ERREUR CRITIQUE LORS DU TEST')
      console.error('Erreur:', error)
      this.generateTestReport(false, false)
    } finally {
      // Restaurer l'environnement
      this.restoreOriginalEnvironment()

      // Nettoyer les bases de test
      await this.cleanupTestDatabases({ keepDatabases: options.keepDatabases })

      await this.destroy()
    }
  }
}

// Ex√©cution du script
if (require.main === module) {
  const args = process.argv.slice(2)
  const keepDatabases = args.includes('--keep-databases')

  console.log('üéØ LANCEMENT DU TEST TOPSTEEL_TEST_* - MIGRATION MULTI-TENANT')
  console.log('üîß Ce test va cr√©er des bases de donn√©es temporaires avec le pr√©fixe topsteel_test_')
  
  if (keepDatabases) {
    console.log('üîí Mode conservation activ√© - les bases de test seront conserv√©es')
  }

  const tester = new TopSteelMigrationTester()
  tester.runCompleteTest({ keepDatabases })
    .then(() => {
      console.log('\\n‚úÖ Test topsteel_test_* termin√©.')
      process.exit(0)
    })
    .catch(error => {
      console.error('‚ùå Test topsteel_test_* √©chou√©:', error)
      process.exit(1)
    })
}

export { TopSteelMigrationTester }