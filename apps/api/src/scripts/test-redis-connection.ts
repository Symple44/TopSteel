import { OptimizedCacheService } from '../common/cache/redis-optimized.service';

async function testRedisConnection() {
  console.log('üîç Test de connexion Redis...');
  
  // V√©rifier les variables d'environnement
  console.log(`REDIS_ENABLED: ${process.env.REDIS_ENABLED}`);
  console.log(`REDIS_HOST: ${process.env.REDIS_HOST}`);
  console.log(`REDIS_PORT: ${process.env.REDIS_PORT}`);
  console.log(`REDIS_DB: ${process.env.REDIS_DB}`);
  
  if (process.env.REDIS_ENABLED !== 'true') {
    console.log('‚ùå Redis est d√©sactiv√© dans la configuration');
    process.exit(1);
  }
  
  const cacheService = new OptimizedCacheService();
  
  try {
    // Test d'√©criture
    console.log('üìù Test d\'√©criture...');
    await cacheService.set('test:connection', { 
      message: 'Redis fonctionne!', 
      timestamp: new Date().toISOString() 
    }, 30);
    
    // Test de lecture
    console.log('üìñ Test de lecture...');
    const result = await cacheService.get('test:connection');
    console.log('‚úÖ Donn√©es r√©cup√©r√©es:', result);
    
    // Test d'invalidation
    console.log('üóëÔ∏è Test d\'invalidation...');
    await cacheService.invalidatePattern('test:*');
    
    const afterDelete = await cacheService.get('test:connection');
    console.log('üîç Apr√®s suppression:', afterDelete);
    
    if (afterDelete === null) {
      console.log('üéâ Tous les tests Redis sont pass√©s !');
      console.log('‚úÖ Redis est op√©rationnel avec votre configuration');
    } else {
      console.log('‚ö†Ô∏è Probl√®me avec l\'invalidation des cl√©s');
    }
    
  } catch (error: any) {
    console.error('‚ùå Erreur Redis:', error.message);
    console.log('üí° V√©rifiez que Redis est d√©marr√© et accessible');
    process.exit(1);
  }
}

// Charger les variables d'environnement
import dotenv from 'dotenv';
import path from 'path';

// Charger depuis le fichier racine
dotenv.config({ path: path.join(__dirname, '../../../../.env.local') });

testRedisConnection().catch(console.error);