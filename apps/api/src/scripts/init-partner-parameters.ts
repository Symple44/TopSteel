/**
 * Script d'initialisation des param√®tres pour les partners
 * Ins√®re les types, cat√©gories et groupes de clients dans la table parameters_client
 */

import type { DataSource } from 'typeorm'
import {
  ClientParameterAccess,
  ClientParameterScope,
  ClientParameterType,
  ParameterClient,
} from '../features/parameters/entities/parameter-client.entity'

// Configuration des param√®tres √† ins√©rer
const PARTNER_PARAMETERS = [
  // Types de partners sp√©cifiques √† la m√©tallurgie
  {
    group: 'partner_types',
    key: 'business_types',
    value: JSON.stringify([
      { code: 'ACIER_CONSTRUCTION', label: 'Acier de construction', icon: 'üèóÔ∏è' },
      { code: 'INOX_ALIMENTAIRE', label: 'Inox alimentaire', icon: 'üç¥' },
      { code: 'ALUMINIUM', label: 'Aluminium', icon: '‚ö°' },
      { code: 'CUIVRE', label: 'Cuivre et alliages', icon: 'üîå' },
      { code: 'SPECIAL', label: 'M√©taux sp√©ciaux', icon: 'üíé' },
      { code: 'RECYCLAGE', label: 'Recyclage m√©taux', icon: '‚ôªÔ∏è' },
      { code: 'NEGOCE', label: 'N√©goce g√©n√©ral', icon: 'üì¶' },
    ]),
    type: ClientParameterType.JSON,
    scope: ClientParameterScope.CONFIGURATION,
    access: ClientParameterAccess.ADMIN_ONLY,
    description: 'Types de business sp√©cifiques √† la m√©tallurgie',
    displayOrder: 1,
  },

  // Groupes tarifaires
  {
    group: 'partner_groups',
    key: 'tariff_groups',
    value: JSON.stringify([
      {
        code: 'VIP',
        label: 'Client VIP',
        discount: 15,
        creditLimit: 100000,
        paymentTerms: '60J',
        color: '#FFD700',
      },
      {
        code: 'GROSSISTE',
        label: 'Grossiste',
        discount: 10,
        creditLimit: 50000,
        paymentTerms: '45J',
        color: '#4CAF50',
      },
      {
        code: 'REVENDEUR',
        label: 'Revendeur',
        discount: 5,
        creditLimit: 25000,
        paymentTerms: '30J',
        color: '#2196F3',
      },
      {
        code: 'PROFESSIONNEL',
        label: 'Professionnel',
        discount: 3,
        creditLimit: 15000,
        paymentTerms: '30J',
        color: '#9C27B0',
      },
      {
        code: 'PARTICULIER',
        label: 'Particulier',
        discount: 0,
        creditLimit: 5000,
        paymentTerms: 'COMPTANT',
        color: '#607D8B',
      },
    ]),
    type: ClientParameterType.JSON,
    scope: ClientParameterScope.CONFIGURATION,
    access: ClientParameterAccess.ADMIN_ONLY,
    description: 'Groupes tarifaires pour les partners',
    displayOrder: 2,
  },

  // Secteurs d'activit√©
  {
    group: 'partner_sectors',
    key: 'activity_sectors',
    value: JSON.stringify([
      { code: 'BTP', label: 'BTP - Construction', icon: 'üèóÔ∏è' },
      { code: 'INDUSTRIE_LOURDE', label: 'Industrie lourde', icon: 'üè≠' },
      { code: 'NAVAL', label: 'Construction navale', icon: 'üö¢' },
      { code: 'AERONAUTIQUE', label: 'A√©ronautique', icon: '‚úàÔ∏è' },
      { code: 'FERROVIAIRE', label: 'Ferroviaire', icon: 'üöÇ' },
      { code: 'AUTOMOBILE', label: 'Automobile', icon: 'üöó' },
      { code: 'ENERGIE', label: '√ânergie', icon: '‚ö°' },
      { code: 'AGRO_ALIMENTAIRE', label: 'Agro-alimentaire', icon: 'üåæ' },
      { code: 'CHIMIE', label: 'Chimie - P√©trochimie', icon: '‚öóÔ∏è' },
      { code: 'MECANIQUE', label: 'M√©canique g√©n√©rale', icon: '‚öôÔ∏è' },
      { code: 'ELECTRONIQUE', label: '√âlectronique', icon: 'üíª' },
      { code: 'MEDICAL', label: 'M√©dical - Pharmaceutique', icon: 'üè•' },
      { code: 'DEFENSE', label: 'D√©fense', icon: 'üõ°Ô∏è' },
      { code: 'AUTRE', label: 'Autre secteur', icon: 'üìã' },
    ]),
    type: ClientParameterType.JSON,
    scope: ClientParameterScope.CONFIGURATION,
    access: ClientParameterAccess.ADMIN_ONLY,
    description: "Secteurs d'activit√© des partners",
    displayOrder: 3,
  },

  // R√¥les des contacts
  {
    group: 'partner_contacts',
    key: 'contact_roles',
    value: JSON.stringify([
      { code: 'COMMERCIAL', label: 'Commercial', icon: 'üíº' },
      { code: 'TECHNIQUE', label: 'Technique', icon: 'üîß' },
      { code: 'COMPTABILITE', label: 'Comptabilit√©', icon: 'üí∞' },
      { code: 'DIRECTION', label: 'Direction', icon: 'üëî' },
      { code: 'ACHATS', label: 'Achats', icon: 'üõí' },
      { code: 'QUALITE', label: 'Qualit√©', icon: '‚úÖ' },
      { code: 'LOGISTIQUE', label: 'Logistique', icon: 'üöö' },
      { code: 'PRODUCTION', label: 'Production', icon: 'üè≠' },
      { code: 'HSE', label: 'HSE - S√©curit√©', icon: 'ü¶∫' },
      { code: 'JURIDIQUE', label: 'Juridique', icon: '‚öñÔ∏è' },
      { code: 'RH', label: 'Ressources Humaines', icon: 'üë•' },
      { code: 'AUTRE', label: 'Autre', icon: 'üìã' },
    ]),
    type: ClientParameterType.JSON,
    scope: ClientParameterScope.CONFIGURATION,
    access: ClientParameterAccess.USER_EDITABLE,
    description: 'R√¥les possibles pour les contacts',
    displayOrder: 4,
  },

  // Types de sites
  {
    group: 'partner_sites',
    key: 'site_types',
    value: JSON.stringify([
      { code: 'SIEGE_SOCIAL', label: 'Si√®ge social', icon: 'üè¢' },
      { code: 'USINE', label: 'Usine de production', icon: 'üè≠' },
      { code: 'DEPOT', label: 'D√©p√¥t / Entrep√¥t', icon: 'üì¶' },
      { code: 'CHANTIER', label: 'Chantier', icon: 'üöß' },
      { code: 'BUREAU', label: 'Bureau / Agence', icon: 'üè¢' },
      { code: 'MAGASIN', label: 'Magasin', icon: 'üè™' },
      { code: 'PLATEFORME', label: 'Plateforme logistique', icon: 'üöõ' },
      { code: 'POINT_LIVRAISON', label: 'Point de livraison', icon: 'üìç' },
      { code: 'ATELIER', label: 'Atelier', icon: 'üîß' },
      { code: 'LABORATOIRE', label: 'Laboratoire', icon: 'üî¨' },
    ]),
    type: ClientParameterType.JSON,
    scope: ClientParameterScope.CONFIGURATION,
    access: ClientParameterAccess.USER_EDITABLE,
    description: 'Types de sites pour les partners',
    displayOrder: 5,
  },

  // Conditions de paiement
  {
    group: 'partner_commercial',
    key: 'payment_terms',
    value: JSON.stringify([
      { code: 'COMPTANT', label: 'Comptant', days: 0 },
      { code: '30J', label: '30 jours', days: 30 },
      { code: '30JFDM', label: '30 jours fin de mois', days: 30, endOfMonth: true },
      { code: '45J', label: '45 jours', days: 45 },
      { code: '45JFDM', label: '45 jours fin de mois', days: 45, endOfMonth: true },
      { code: '60J', label: '60 jours', days: 60 },
      { code: '60JFDM', label: '60 jours fin de mois', days: 60, endOfMonth: true },
      { code: '90J', label: '90 jours', days: 90 },
      { code: 'ANTICIPE', label: 'Paiement anticip√©', days: -1 },
      { code: 'SPECIAL', label: 'Conditions sp√©ciales', days: null },
    ]),
    type: ClientParameterType.JSON,
    scope: ClientParameterScope.CONFIGURATION,
    access: ClientParameterAccess.ADMIN_ONLY,
    description: 'Conditions de paiement disponibles',
    displayOrder: 6,
  },

  // Modes de paiement
  {
    group: 'partner_commercial',
    key: 'payment_methods',
    value: JSON.stringify([
      { code: 'VIREMENT', label: 'Virement bancaire', icon: 'üè¶' },
      { code: 'CHEQUE', label: 'Ch√®que', icon: 'üìù' },
      { code: 'CB', label: 'Carte bancaire', icon: 'üí≥' },
      { code: 'ESPECES', label: 'Esp√®ces', icon: 'üíµ' },
      { code: 'TRAITE', label: 'Traite', icon: 'üìú' },
      { code: 'LCR', label: 'LCR', icon: 'üìÑ' },
      { code: 'PRELEVEMENT', label: 'Pr√©l√®vement SEPA', icon: 'üîÑ' },
      { code: 'AFFACTURAGE', label: 'Affacturage', icon: 'üìä' },
    ]),
    type: ClientParameterType.JSON,
    scope: ClientParameterScope.CONFIGURATION,
    access: ClientParameterAccess.USER_EDITABLE,
    description: 'Modes de paiement accept√©s',
    displayOrder: 7,
  },

  // Incoterms pour l'international
  {
    group: 'partner_commercial',
    key: 'incoterms',
    value: JSON.stringify([
      { code: 'EXW', label: 'EXW - Ex Works', description: 'D√©part usine' },
      { code: 'FCA', label: 'FCA - Free Carrier', description: 'Franco transporteur' },
      { code: 'CPT', label: 'CPT - Carriage Paid To', description: "Port pay√© jusqu'√†" },
      {
        code: 'CIP',
        label: 'CIP - Carriage and Insurance Paid To',
        description: 'Port pay√©, assurance comprise',
      },
      {
        code: 'DAP',
        label: 'DAP - Delivered at Place',
        description: 'Rendu au lieu de destination',
      },
      {
        code: 'DPU',
        label: 'DPU - Delivered at Place Unloaded',
        description: 'Rendu au lieu de destination d√©charg√©',
      },
      { code: 'DDP', label: 'DDP - Delivered Duty Paid', description: 'Rendu droits acquitt√©s' },
      { code: 'FAS', label: 'FAS - Free Alongside Ship', description: 'Franco le long du navire' },
      { code: 'FOB', label: 'FOB - Free on Board', description: 'Franco √† bord' },
      { code: 'CFR', label: 'CFR - Cost and Freight', description: 'Co√ªt et fret' },
      {
        code: 'CIF',
        label: 'CIF - Cost, Insurance and Freight',
        description: 'Co√ªt, assurance et fret',
      },
    ]),
    type: ClientParameterType.JSON,
    scope: ClientParameterScope.CONFIGURATION,
    access: ClientParameterAccess.USER_EDITABLE,
    description: 'Incoterms 2020 pour le commerce international',
    displayOrder: 8,
  },

  // Types de v√©hicules pour la logistique
  {
    group: 'partner_logistics',
    key: 'vehicle_types',
    value: JSON.stringify([
      { code: 'VL', label: 'V√©hicule l√©ger', maxTonnage: 3.5 },
      { code: 'PORTEUR', label: 'Porteur', maxTonnage: 19 },
      { code: 'SEMI', label: 'Semi-remorque', maxTonnage: 44 },
      { code: 'TRAIN_ROUTIER', label: 'Train routier', maxTonnage: 44 },
      { code: 'PORTE_CHAR', label: 'Porte-char', maxTonnage: 50 },
      { code: 'GRUE', label: 'Camion-grue', maxTonnage: 32 },
      { code: 'PLATEAU', label: 'Plateau', maxTonnage: 44 },
      { code: 'BENNE', label: 'Benne', maxTonnage: 32 },
      { code: 'CITERNE', label: 'Citerne', maxTonnage: 30 },
    ]),
    type: ClientParameterType.JSON,
    scope: ClientParameterScope.CONFIGURATION,
    access: ClientParameterAccess.USER_EDITABLE,
    description: 'Types de v√©hicules pour la livraison',
    displayOrder: 9,
  },

  // Zones de transport
  {
    group: 'partner_logistics',
    key: 'transport_zones',
    value: JSON.stringify([
      { code: 'LOCAL', label: 'Local (< 50km)', tarifMultiplier: 1 },
      { code: 'REGIONAL', label: 'R√©gional (50-200km)', tarifMultiplier: 1.2 },
      { code: 'NATIONAL', label: 'National (> 200km)', tarifMultiplier: 1.5 },
      { code: 'INTERNATIONAL_UE', label: 'International UE', tarifMultiplier: 2 },
      { code: 'INTERNATIONAL_HORS_UE', label: 'International Hors UE', tarifMultiplier: 3 },
      { code: 'EXPRESS', label: 'Express', tarifMultiplier: 2.5 },
      { code: 'URGENT', label: 'Urgent', tarifMultiplier: 3.5 },
    ]),
    type: ClientParameterType.JSON,
    scope: ClientParameterScope.CONFIGURATION,
    access: ClientParameterAccess.ADMIN_ONLY,
    description: 'Zones de transport et multiplicateurs tarifaires',
    displayOrder: 10,
  },
]

async function initPartnerParameters(dataSource: DataSource): Promise<void> {
  const repository = dataSource.getRepository(ParameterClient)

  console.log('üöÄ Initialisation des param√®tres partners...')

  for (const param of PARTNER_PARAMETERS) {
    try {
      // V√©rifier si le param√®tre existe d√©j√†
      const existing = await repository.findOne({
        where: {
          group: param.group,
          key: param.key,
          tenantId: 'default', // √Ä adapter selon votre syst√®me de tenant
        },
      })

      if (existing) {
        console.log(`‚ö†Ô∏è  Param√®tre existant: ${param.group}.${param.key}`)
        continue
      }

      // Cr√©er le nouveau param√®tre
      const entity = repository.create({
        ...param,
        tenantId: 'default', // √Ä adapter selon votre syst√®me de tenant
        isEditable: param.access !== ClientParameterAccess.SYSTEM_MANAGED,
        metadata: {
          createdBy: 'system',
          createdAt: new Date().toISOString(),
          source: 'init-script',
        },
      })

      await repository.save(entity)
      console.log(`‚úÖ Param√®tre cr√©√©: ${param.group}.${param.key}`)
    } catch (error) {
      console.error(`‚ùå Erreur cr√©ation param√®tre ${param.group}.${param.key}:`, error)
    }
  }

  console.log('‚ú® Initialisation des param√®tres partners termin√©e!')
}

// Si ex√©cut√© directement
if (require.main === module) {
  const { AppDataSource } = require('../core/database/data-source')

  AppDataSource.initialize()
    .then(async () => {
      await initPartnerParameters(AppDataSource)
      await AppDataSource.destroy()
      process.exit(0)
    })
    .catch((error: Error) => {
      console.error('Erreur:', error)
      process.exit(1)
    })
}

export { initPartnerParameters }
