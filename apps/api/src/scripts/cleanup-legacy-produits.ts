#!/usr/bin/env ts-node

/**
 * Script de nettoyage de la table legacy 'produits'
 * TopSteel ERP - Clean Architecture
 * 
 * Usage: npm run cleanup:produits
 * ou: npx ts-node src/scripts/cleanup-legacy-produits.ts
 */

import { DataSource } from 'typeorm'
import { config } from 'dotenv'
import * as readline from 'readline'

// Charger les variables d'environnement
config()

async function askConfirmation(question: string): Promise<boolean> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  })

  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close()
      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes')
    })
  })
}

async function cleanupLegacyProduits() {
  console.log('üßπ NETTOYAGE DE LA TABLE LEGACY "produits"')
  console.log('==========================================\n')

  // Configuration base de donn√©es
  const dbName = process.env.TENANT_DB_NAME || 'erp_topsteel_topsteel'
  
  const dataSource = new DataSource({
    type: 'postgres',
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    username: process.env.DB_USERNAME || 'postgres',
    password: process.env.DB_PASSWORD || 'postgres',
    database: dbName,
    logging: false,
  })

  try {
    // Connexion base de donn√©es
    console.log('üîå Connexion √† la base de donn√©es...')
    await dataSource.initialize()
    console.log('‚úÖ Connexion √©tablie\n')

    // V√©rifier si la table existe
    const tableExists = await dataSource.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'produits'
      )
    `)

    if (!tableExists[0].exists) {
      console.log('‚ÑπÔ∏è  La table "produits" n\'existe pas. Nettoyage non n√©cessaire.')
      return
    }

    // V√©rifier le contenu de la table
    const countResult = await dataSource.query('SELECT COUNT(*) FROM produits')
    const count = parseInt(countResult[0].count)

    console.log(`üìä √âtat de la table "produits":`)
    console.log(`   - Existe: ‚úÖ`)
    console.log(`   - Nombre d'enregistrements: ${count}`)

    // V√©rifier les contraintes de cl√© √©trang√®re
    const fkConstraints = await dataSource.query(`
      SELECT 
        tc.constraint_name,
        tc.table_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name 
      FROM information_schema.table_constraints AS tc 
      JOIN information_schema.key_column_usage AS kcu 
        ON tc.constraint_name = kcu.constraint_name 
      JOIN information_schema.constraint_column_usage AS ccu 
        ON ccu.constraint_name = tc.constraint_name 
      WHERE constraint_type = 'FOREIGN KEY' 
      AND ccu.table_name = 'produits'
    `)

    if (fkConstraints.length > 0) {
      console.log(`\n‚ö†Ô∏è  ATTENTION: ${fkConstraints.length} contrainte(s) de cl√© √©trang√®re r√©f√©rencent cette table:`)
      fkConstraints.forEach((fk: any) => {
        console.log(`   - ${fk.table_name}.${fk.column_name} ‚Üí produits.${fk.foreign_column_name}`)
      })
      console.log('\nüõë Suppression annul√©e pour pr√©server l\'int√©grit√© des donn√©es.')
      return
    }

    // Demander confirmation
    console.log(`\n‚ö†Ô∏è  Vous √™tes sur le point de supprimer d√©finitivement:`)
    console.log(`   - La table "produits"`)
    console.log(`   - Ses ${count} enregistrement(s)`)
    console.log(`   - Ses index et contraintes`)
    console.log(`\n‚ö†Ô∏è  CETTE ACTION EST IRR√âVERSIBLE!`)

    const confirmed = await askConfirmation('\n‚ùì Confirmez-vous la suppression? (y/N): ')

    if (!confirmed) {
      console.log('\n‚ùå Suppression annul√©e par l\'utilisateur.')
      return
    }

    // Sauvegarder les donn√©es si il y en a
    if (count > 0) {
      console.log('\nüíæ Sauvegarde des donn√©es existantes...')
      const data = await dataSource.query('SELECT * FROM produits')
      
      // Cr√©er une table de sauvegarde
      await dataSource.query(`
        CREATE TABLE IF NOT EXISTS produits_backup_${Date.now()} AS 
        SELECT * FROM produits
      `)
      console.log('‚úÖ Sauvegarde cr√©√©e')
    }

    // Supprimer la table
    console.log('\nüóëÔ∏è  Suppression de la table "produits"...')
    await dataSource.query('DROP TABLE IF EXISTS produits CASCADE')
    console.log('‚úÖ Table "produits" supprim√©e avec succ√®s')

    // Supprimer la s√©quence associ√©e si elle existe
    await dataSource.query('DROP SEQUENCE IF EXISTS produits_id_seq CASCADE')
    console.log('‚úÖ S√©quence "produits_id_seq" supprim√©e')

    // V√©rification finale
    const finalCheck = await dataSource.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'produits'
      )
    `)

    if (!finalCheck[0].exists) {
      console.log('\nüéâ NETTOYAGE TERMIN√â AVEC SUCC√àS!')
      console.log('   ‚úÖ Table "produits" compl√®tement supprim√©e')
      console.log('   ‚úÖ Base de donn√©es nettoy√©e')
      console.log('   ‚úÖ Migration vers "articles" compl√®te')
    } else {
      console.log('\n‚ùå Erreur: La table existe encore apr√®s suppression')
    }

  } catch (error) {
    console.error('\nüí• ERREUR lors du nettoyage:', error)
    throw error
  } finally {
    if (dataSource.isInitialized) {
      await dataSource.destroy()
      console.log('\nüîå Connexion ferm√©e')
    }
  }
}

// Ex√©cution du script
async function main() {
  try {
    await cleanupLegacyProduits()
    console.log('\n‚ú® Script termin√© avec succ√®s')
  } catch (error) {
    console.error('\nüí• ERREUR FATALE:', error)
    process.exit(1)
  }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  main().catch(console.error)
}