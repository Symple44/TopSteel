#!/usr/bin/env ts-node

/**
 * Script pour ex√©cuter les migrations de la Phase 0
 *
 * Ce script ex√©cute dans l'ordre :
 * 1. Les migrations pour aligner la structure des tables
 * 2. La r√©initialisation des utilisateurs ADMIN et TEST
 */

import { config } from 'dotenv'
import * as fs from 'fs'
import * as path from 'path'
import { DataSource } from 'typeorm'
import { authDataSourceOptions } from '../core/database/data-source-auth'
import { AdminTestUsersResetter } from './reset-admin-test-users'

config()

class Phase0MigrationRunner {
  private authDataSource: DataSource

  constructor() {
    // Configurer la datasource avec les migrations
    const migrationsPath = path.join(__dirname, '../core/database/migrations/auth/*.ts')

    this.authDataSource = new DataSource({
      ...authDataSourceOptions,
      migrations: [migrationsPath],
      logging: true,
    })
  }

  async runMigrations(): Promise<void> {
    console.log('üöÄ Ex√©cution des migrations de la Phase 0...\n')

    try {
      // 1. Initialiser la connexion
      await this.authDataSource.initialize()
      console.log('‚úÖ Connexion √©tablie √† la base AUTH\n')

      // 2. V√©rifier les migrations en attente
      const pendingMigrations = await this.authDataSource.showMigrations()
      console.log('üìã V√©rification des migrations...')

      if (pendingMigrations) {
        console.log(`üìù ${pendingMigrations} migration(s) en attente\n`)

        // 3. Ex√©cuter les migrations
        console.log('üîÑ Ex√©cution des migrations...')
        const migrations = await this.authDataSource.runMigrations()

        if (migrations.length > 0) {
          console.log(`\n‚úÖ ${migrations.length} migration(s) ex√©cut√©e(s) avec succ√®s:`)
          migrations.forEach((migration) => {
            console.log(`   - ${migration.name}`)
          })
        }
      } else {
        console.log('‚úÖ Toutes les migrations sont d√©j√† ex√©cut√©es\n')
      }

      // 4. Afficher l'√©tat actuel
      await this.displayMigrationStatus()
    } catch (error) {
      console.error("‚ùå Erreur lors de l'ex√©cution des migrations:", error)
      throw error
    } finally {
      if (this.authDataSource.isInitialized) {
        await this.authDataSource.destroy()
      }
    }
  }

  private async displayMigrationStatus(): Promise<void> {
    console.log('\nüìä √âtat actuel des migrations:')

    try {
      const executedMigrations = await this.authDataSource.query(`
        SELECT name, "timestamp" 
        FROM typeorm_migrations 
        ORDER BY "timestamp" DESC 
        LIMIT 10
      `)

      if (executedMigrations.length > 0) {
        console.log('   Derni√®res migrations ex√©cut√©es:')
        executedMigrations.forEach((migration: any) => {
          const date = new Date(migration.timestamp)
          console.log(`   - ${migration.name} (${date.toLocaleString()})`)
        })
      }
    } catch (error) {
      // La table typeorm_migrations pourrait ne pas exister
      console.log("   ‚ö†Ô∏è  Impossible de r√©cup√©rer l'historique des migrations")
    }
  }

  async verifyTableStructures(): Promise<void> {
    console.log('\nüîç V√©rification des structures de tables apr√®s migration...\n')

    try {
      await this.authDataSource.initialize()

      // V√©rifier user_sessions
      console.log('üìã Table user_sessions:')
      const sessionColumns = await this.authDataSource.query(`
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'user_sessions' 
        AND table_schema = 'public'
        ORDER BY ordinal_position
      `)
      console.log(`   - ${sessionColumns.length} colonnes`)
      const expectedSessionColumns = [
        'userId',
        'sessionId',
        'accessToken',
        'refreshToken',
        'deviceInfo',
        'location',
      ]
      const hasAllSessionColumns = expectedSessionColumns.every((col) =>
        sessionColumns.some((dbCol: any) => dbCol.column_name === col)
      )
      console.log(`   - Structure ${hasAllSessionColumns ? '‚úÖ correcte' : '‚ö†Ô∏è  incompl√®te'}`)

      // V√©rifier roles
      console.log('\nüìã Table roles:')
      const roleColumns = await this.authDataSource.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'roles' 
        AND table_schema = 'public'
        AND column_name IN ('name', 'nom')
      `)
      const hasCorrectNameColumn = roleColumns.some((col: any) => col.column_name === 'name')
      console.log(`   - Colonne 'name' ${hasCorrectNameColumn ? '‚úÖ pr√©sente' : '‚ùå manquante'}`)

      // V√©rifier permissions
      console.log('\nüìã Table permissions:')
      const permissionColumns = await this.authDataSource.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'permissions' 
        AND table_schema = 'public'
        AND column_name IN ('resource', 'scope', 'isActive', 'metadata')
      `)
      const modernColumns = ['resource', 'scope', 'isActive', 'metadata']
      const hasMissingColumns = modernColumns.filter(
        (col) => !permissionColumns.some((dbCol: any) => dbCol.column_name === col)
      )
      console.log(
        `   - Colonnes modernes ${hasMissingColumns.length === 0 ? '‚úÖ toutes pr√©sentes' : `‚ö†Ô∏è  manquantes: ${hasMissingColumns.join(', ')}`}`
      )
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification:', error)
    } finally {
      if (this.authDataSource.isInitialized) {
        await this.authDataSource.destroy()
      }
    }
  }
}

// Fonction principale
async function main() {
  console.log('='.repeat(80))
  console.log('üîß PHASE 0 - MIGRATION ET R√âINITIALISATION')
  console.log('='.repeat(80))
  console.log()

  const runner = new Phase0MigrationRunner()
  const resetter = new AdminTestUsersResetter()

  try {
    // 1. Ex√©cuter les migrations
    await runner.runMigrations()

    // 2. V√©rifier les structures
    await runner.verifyTableStructures()

    // 3. R√©initialiser les utilisateurs
    console.log('\n' + '='.repeat(80))
    console.log('üë• R√âINITIALISATION DES UTILISATEURS')
    console.log('='.repeat(80))
    await resetter.resetUsers()

    console.log('\n' + '='.repeat(80))
    console.log('‚úÖ PHASE 0 TERMIN√âE AVEC SUCC√àS!')
    console.log('='.repeat(80))
    console.log('\nüéØ Prochaines √©tapes:')
    console.log('   1. Tester la connexion avec les utilisateurs r√©initialis√©s')
    console.log('   2. V√©rifier que les sessions sont correctement cr√©√©es')
    console.log("   3. Passer √† la Phase 1 du plan d'impl√©mentation")
  } catch (error) {
    console.error('\nüí• ERREUR FATALE:', error)
    process.exit(1)
  }
}

// Afficher l'aide si demand√©
if (process.argv.includes('--help')) {
  console.log(`
üîß Script d'ex√©cution des migrations Phase 0

Ce script ex√©cute dans l'ordre :
1. Les migrations pour aligner la structure des tables
2. La v√©rification des structures apr√®s migration
3. La r√©initialisation des utilisateurs ADMIN et TEST

Usage:
  ts-node apps/api/src/scripts/run-phase0-migrations.ts

Options:
  --help    Afficher cette aide

‚ö†Ô∏è  ATTENTION: Ce script modifie la structure de la base de donn√©es !
             Assurez-vous d'avoir une sauvegarde avant de l'ex√©cuter.
`)
  process.exit(0)
}

if (require.main === module) {
  main()
}
