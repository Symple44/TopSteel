import { AdjustmentType, PriceRule, PriceRuleChannel } from '@erp/entities'
import { DataSource } from 'typeorm'

/**
 * Script pour cr√©er des r√®gles de prix par d√©faut
 * Notamment pour le marketplace et les calculs par unit√©
 */
async function setupDefaultPricingRules() {
  const dataSource = new DataSource({
    type: 'postgres',
    host: 'localhost',
    port: 5432,
    username: 'postgres',
    password: 'postgres',
    database: 'erp_topsteel_topsteel',
    entities: [PriceRule],
    synchronize: false,
    logging: true,
  })

  try {
    await dataSource.initialize()
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie\n')

    const priceRuleRepo = dataSource.getRepository(PriceRule)

    // R√©cup√©rer la soci√©t√© TopSteel
    const societeResult = await dataSource.query(`
      SELECT id FROM societes WHERE denomination = 'TOPSTEEL' LIMIT 1
    `)

    if (!societeResult || societeResult.length === 0) {
      throw new Error('Soci√©t√© TOPSTEEL non trouv√©e')
    }

    const societeId = societeResult[0].id
    console.log(`üì¶ Soci√©t√© TOPSTEEL trouv√©e: ${societeId}\n`)

    // V√©rifier les r√®gles existantes
    const existingRules = await priceRuleRepo.find({
      where: { societeId },
    })

    console.log(`üìã ${existingRules.length} r√®gles existantes trouv√©es\n`)

    const rulesToCreate = []

    // 1. R√®gle marketplace par d√©faut - Marge de 15% sur tous les articles
    const marketplaceDefaultRule = priceRuleRepo.create({
      societeId,
      ruleName: 'Marge Marketplace Standard',
      description: 'Applique une marge de 15% sur tous les articles vendus sur le marketplace',
      channel: PriceRuleChannel.MARKETPLACE,
      adjustmentType: AdjustmentType.PERCENTAGE,
      adjustmentValue: 15, // +15% de marge
      conditions: [], // Pas de condition - s'applique √† tous
      priority: 1, // Priorit√© basse (r√®gles sp√©cifiques passeront avant)
      combinable: true,
      isActive: true,
      metadata: {
        createdBy: 'system',
        notes: 'R√®gle par d√©faut pour le marketplace',
        tags: ['marketplace', 'default'],
      },
    })
    rulesToCreate.push(marketplaceDefaultRule)

    // 2. R√®gle pour les profil√©s IPE - Prix au kg
    const ipeWeightRule = priceRuleRepo.create({
      societeId,
      ruleName: 'Profil√©s IPE - Prix au poids',
      description: 'Prix au kilogramme pour les profil√©s IPE',
      channel: PriceRuleChannel.ALL,
      adjustmentType: AdjustmentType.PRICE_PER_WEIGHT,
      adjustmentValue: 1.85, // 1.85‚Ç¨/kg
      adjustmentUnit: 'KG',
      conditions: [
        {
          type: 'article_reference',
          operator: 'starts_with',
          value: 'IPE',
        },
      ],
      priority: 10,
      combinable: false, // Ne pas combiner avec d'autres r√®gles
      isActive: true,
      metadata: {
        createdBy: 'system',
        notes: 'Prix au poids pour profil√©s IPE',
      },
    })
    rulesToCreate.push(ipeWeightRule)

    // 3. R√®gle pour les t√¥les - Prix au m¬≤
    const sheetSurfaceRule = priceRuleRepo.create({
      societeId,
      ruleName: 'T√¥les - Prix √† la surface',
      description: 'Prix au m√®tre carr√© pour les t√¥les',
      channel: PriceRuleChannel.ALL,
      adjustmentType: AdjustmentType.PRICE_PER_SURFACE,
      adjustmentValue: 45, // 45‚Ç¨/m¬≤
      adjustmentUnit: 'M2',
      conditions: [
        {
          type: 'article_family',
          operator: 'equals',
          value: 'TOLES',
        },
      ],
      priority: 10,
      combinable: false,
      isActive: true,
      metadata: {
        createdBy: 'system',
        notes: 'Prix √† la surface pour les t√¥les',
      },
    })
    rulesToCreate.push(sheetSurfaceRule)

    // 4. R√®gle pour les tubes - Prix au m√®tre lin√©aire
    const tubeLengthRule = priceRuleRepo.create({
      societeId,
      ruleName: 'Tubes - Prix au m√®tre',
      description: 'Prix au m√®tre lin√©aire pour les tubes',
      channel: PriceRuleChannel.ALL,
      adjustmentType: AdjustmentType.PRICE_PER_LENGTH,
      adjustmentValue: 12.5, // 12.5‚Ç¨/m
      adjustmentUnit: 'M',
      conditions: [
        {
          type: 'article_reference',
          operator: 'starts_with',
          value: 'TUB',
        },
      ],
      priority: 10,
      combinable: false,
      isActive: true,
      metadata: {
        createdBy: 'system',
        notes: 'Prix au m√®tre pour les tubes',
      },
    })
    rulesToCreate.push(tubeLengthRule)

    // 5. Remise quantit√© - Plus de 100 unit√©s
    const quantityDiscountRule = priceRuleRepo.create({
      societeId,
      ruleName: 'Remise Quantit√© > 100',
      description: 'Remise de 5% pour les commandes de plus de 100 unit√©s',
      channel: PriceRuleChannel.ALL,
      adjustmentType: AdjustmentType.PERCENTAGE,
      adjustmentValue: -5, // -5% de remise
      conditions: [
        {
          type: 'quantity',
          operator: 'greater_than',
          value: 100,
        },
      ],
      priority: 5,
      combinable: true, // Peut se combiner avec d'autres r√®gles
      isActive: true,
      metadata: {
        createdBy: 'system',
        notes: 'Remise automatique pour grandes quantit√©s',
      },
    })
    rulesToCreate.push(quantityDiscountRule)

    // 6. Prix fixe pour certains articles sp√©ciaux
    const fixedPriceRule = priceRuleRepo.create({
      societeId,
      ruleName: 'Prix Promotionnel HEA200',
      description: 'Prix promotionnel fixe pour HEA200',
      channel: PriceRuleChannel.MARKETPLACE,
      adjustmentType: AdjustmentType.FIXED_PRICE,
      adjustmentValue: 89.99, // Prix fixe √† 89.99‚Ç¨
      conditions: [
        {
          type: 'article_reference',
          operator: 'equals',
          value: 'HEA200-S275JR',
        },
      ],
      priority: 20, // Haute priorit√©
      combinable: false,
      isActive: true,
      validFrom: new Date(),
      validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // Valable 30 jours
      metadata: {
        createdBy: 'system',
        notes: 'Promotion sp√©ciale HEA200',
        tags: ['promo', 'featured'],
      },
    })
    rulesToCreate.push(fixedPriceRule)

    // 7. R√®gle avec formule pour les profil√©s complexes
    const formulaRule = priceRuleRepo.create({
      societeId,
      ruleName: 'Calcul Complexe RHS',
      description: 'Calcul de prix bas√© sur une formule pour les profil√©s RHS',
      channel: PriceRuleChannel.ALL,
      adjustmentType: AdjustmentType.FORMULA,
      adjustmentValue: 0, // Non utilis√© pour FORMULA
      formula: '(weight * 1.95) + (length * 2.5) + 15', // Prix = (poids * 1.95) + (longueur * 2.5) + 15‚Ç¨ fixe
      conditions: [
        {
          type: 'article_reference',
          operator: 'starts_with',
          value: 'RHS',
        },
      ],
      priority: 15,
      combinable: false,
      isActive: true,
      metadata: {
        createdBy: 'system',
        notes: 'Formule complexe pour RHS incluant poids et longueur',
        tags: ['formula', 'complex'],
      },
    })
    rulesToCreate.push(formulaRule)

    // Sauvegarder toutes les r√®gles
    console.log('üíæ Cr√©ation des r√®gles de prix...\n')

    for (const rule of rulesToCreate) {
      try {
        // V√©rifier si une r√®gle similaire existe d√©j√†
        const existing = existingRules.find((r) => r.ruleName === rule.ruleName)

        if (existing) {
          console.log(`‚è≠Ô∏è  R√®gle "${rule.ruleName}" existe d√©j√†, mise √† jour...`)
          Object.assign(existing, rule)
          await priceRuleRepo.save(existing)
          console.log(`‚úÖ R√®gle "${rule.ruleName}" mise √† jour`)
        } else {
          await priceRuleRepo.save(rule)
          console.log(`‚úÖ R√®gle "${rule.ruleName}" cr√©√©e`)
        }
      } catch (error) {
        console.error(
          `‚ùå Erreur lors de la cr√©ation de la r√®gle "${rule.ruleName}":`,
          error.message
        )
      }
    }

    // Afficher un r√©sum√©
    console.log('\nüìä R√©sum√© des r√®gles de prix:')
    const allRules = await priceRuleRepo.find({
      where: { societeId, isActive: true },
      order: { priority: 'DESC', ruleName: 'ASC' },
    })

    console.log(`\nTotal: ${allRules.length} r√®gles actives\n`)

    allRules.forEach((rule) => {
      const unit = rule.adjustmentUnit ? ` ${rule.adjustmentUnit}` : ''
      const value =
        rule.adjustmentType === AdjustmentType.PERCENTAGE
          ? `${rule.adjustmentValue}%`
          : rule.adjustmentType === AdjustmentType.FORMULA
            ? 'Formule'
            : `${rule.adjustmentValue}‚Ç¨${unit}`

      console.log(`  [${rule.priority}] ${rule.ruleName}`)
      console.log(`      Type: ${rule.adjustmentType} | Valeur: ${value}`)
      console.log(`      Canal: ${rule.channel} | Combinable: ${rule.combinable ? 'Oui' : 'Non'}`)
      if (rule.conditions && rule.conditions.length > 0) {
        console.log(`      Conditions: ${JSON.stringify(rule.conditions)}`)
      } else {
        console.log(`      Conditions: Aucune (s'applique √† tous)`)
      }
      console.log('')
    })

    // Test rapide d'une r√®gle
    console.log('üß™ Test rapide de calcul de prix...\n')

    const testArticle = await dataSource.query(`
      SELECT id, reference, designation, prix_vente_ht, poids, longueur
      FROM articles
      WHERE reference = 'IPE140-S275JR'
      LIMIT 1
    `)

    if (testArticle && testArticle.length > 0) {
      const article = testArticle[0]
      console.log(`Article test: ${article.reference}`)
      console.log(`  Prix de base: ${article.prix_vente_ht}‚Ç¨`)
      console.log(`  Poids: ${article.poids} kg`)

      // La r√®gle IPE au poids devrait s'appliquer
      const expectedPrice = article.poids * 1.85
      console.log(`  Prix attendu (poids * 1.85‚Ç¨/kg): ${expectedPrice.toFixed(2)}‚Ç¨`)
    }
  } catch (error) {
    console.error('\n‚ùå Erreur:', error)
    throw error
  } finally {
    await dataSource.destroy()
  }
}

// Ex√©cution
setupDefaultPricingRules()
  .then(() => {
    console.log('\n‚úÖ Configuration des r√®gles de prix termin√©e avec succ√®s')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Erreur fatale:', error)
    process.exit(1)
  })
