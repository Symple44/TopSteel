#!/usr/bin/env ts-node
/**
 * Script pour tester le service MenuConfiguration directement
 */

import { DataSource } from 'typeorm'
import { authDataSourceOptions } from '../database/data-source-auth'

// Import des entit√©s corrig√©es
import { MenuConfiguration } from '../modules/admin/entities/menu-configuration.entity'
import { MenuItem } from '../modules/admin/entities/menu-item.entity'
import { MenuItemPermission } from '../modules/admin/entities/menu-item-permission.entity'
import { MenuItemRole } from '../modules/admin/entities/menu-item-role.entity'

// Import du service
import { MenuConfigurationService } from '../modules/admin/services/menu-configuration.service'

async function testMenuService() {
  console.log('üîÑ Test direct du service MenuConfiguration...\n')

  // Cr√©er une datasource avec les entit√©s corrig√©es
  const dataSource = new DataSource({
    ...authDataSourceOptions,
    entities: [
      MenuConfiguration,
      MenuItem, 
      MenuItemPermission,
      MenuItemRole
    ]
  })
  
  try {
    await dataSource.initialize()
    console.log('‚úÖ DataSource initialis√©e avec succ√®s')

    // Cr√©er les repositories
    const configRepo = dataSource.getRepository(MenuConfiguration)
    const itemRepo = dataSource.getRepository(MenuItem)
    const permissionRepo = dataSource.getRepository(MenuItemPermission)
    const roleRepo = dataSource.getRepository(MenuItemRole)

    // Cr√©er le service
    const menuService = new MenuConfigurationService(
      configRepo,
      itemRepo,
      permissionRepo,
      roleRepo
    )

    console.log('\nüìã Test findAllConfigurations():')
    const allConfigs = await menuService.findAllConfigurations()
    console.log(`   ‚úÖ ${allConfigs.length} configuration(s) trouv√©e(s)`)
    allConfigs.forEach(config => {
      console.log(`      - ${config.name} (${config.isActive ? 'active' : 'inactive'})`)
    })

    console.log('\nüå≥ Test getMenuTree():')
    const menuTree = await menuService.getMenuTree()
    console.log(`   ‚úÖ ${menuTree.length} item(s) racine(s) dans l'arbre`)
    
    function printTree(items: any[], level: number = 0) {
      const indent = '  '.repeat(level + 1)
      items.forEach(item => {
        const typeEmoji = item.type === 'M' ? 'üìÅ' : item.type === 'P' ? 'üîó' : item.type === 'L' ? 'üåê' : 'üìä'
        console.log(`${indent}${typeEmoji} ${item.title} (${item.type})`)
        if (item.children && item.children.length > 0) {
          printTree(item.children, level + 1)
        }
      })
    }
    
    printTree(menuTree)

    console.log('\nüîç Test findActiveConfiguration():')
    const activeConfig = await menuService.findActiveConfiguration()
    if (activeConfig) {
      console.log(`   ‚úÖ Configuration active: ${activeConfig.name}`)
      console.log(`      Items associ√©s: ${activeConfig.items?.length || 0}`)
    } else {
      console.log('   ‚ö†Ô∏è  Aucune configuration active')
    }

    console.log('\nüéâ Tous les tests du service ont r√©ussi!')

  } catch (error: any) {
    console.error('‚ùå Erreur lors du test:', error.message)
    if (error.stack) console.error('Stack:', error.stack.split('\n').slice(0, 5).join('\n'))
  } finally {
    if (dataSource.isInitialized) {
      await dataSource.destroy()
    }
  }
}

testMenuService().catch(console.error)