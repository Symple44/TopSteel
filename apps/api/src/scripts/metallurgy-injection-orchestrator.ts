#!/usr/bin/env ts-node

/**
 * Orchestrateur principal pour injection d'articles m√©tallurgie
 * TopSteel ERP - Clean Architecture
 *
 * Usage: npm run inject-metallurgy-clean
 * ou: npx ts-node src/scripts/metallurgy-injection-orchestrator.ts
 */

import { config } from 'dotenv'
import { existsSync, readFileSync } from 'fs'
import { join } from 'path'
import { DataSource } from 'typeorm'
import { AnglesInjector } from './injectors/angles-injector'
import { BarsInjector } from './injectors/bars-injector'
import { HeaHebProfilesInjector } from './injectors/hea-heb-profiles-injector'

// Injecteurs
import { IpeProfilesInjector } from './injectors/ipe-profiles-injector'
import { IpnProfilesInjector } from './injectors/ipn-profiles-injector'
import { SheetsInjector } from './injectors/sheets-injector'
import { ShsRhsProfilesInjector } from './injectors/shs-rhs-profiles-injector'
import { TSectionsInjector } from './injectors/t-sections-injector'
import { TubesInjector } from './injectors/tubes-injector'
import { UpnProfilesInjector } from './injectors/upn-profiles-injector'
import { ZProfilesInjector } from './injectors/z-profiles-injector'
import { ArticleValidatorService } from './services/article-validator.service'
// Services
import { InjectionLoggerService } from './services/injection-logger.service'
import { PricingCalculatorService } from './services/pricing-calculator.service'

// Types
import type {
  GlobalInjectionConfig,
  InjectionResult,
  SystemParameter,
} from './types/article-injection.types'

// Charger les variables d'environnement
config()

export class CleanMetallurgyInjector {
  private dataSource: DataSource
  private authDataSource: DataSource
  private config: GlobalInjectionConfig
  private logger: InjectionLoggerService
  private validator: ArticleValidatorService
  private pricingCalculator: PricingCalculatorService
  private results: InjectionResult[] = []

  constructor() {
    // Configuration d'injection
    this.config = {
      societeId: process.env.DEFAULT_SOCIETE_ID || 'default-societe-id',
      environment: (process.env.NODE_ENV as any) || 'development',
      cleanupExisting: process.env.CLEANUP_EXISTING === 'true',
      validateReferences: process.env.VALIDATE_REFERENCES !== 'false',
      skipOnError: process.env.SKIP_ON_ERROR === 'true',
      batchSize: parseInt(process.env.BATCH_SIZE || '50'),
      logLevel: (process.env.LOG_LEVEL as any) || 'info',
    }

    // Services
    this.logger = new InjectionLoggerService(this.config)
    this.validator = new ArticleValidatorService(this.logger)
    this.pricingCalculator = new PricingCalculatorService(this.logger)

    // Configuration base de donn√©es tenant (pour articles)
    const dbName = process.env.TENANT_DB_NAME || 'erp_topsteel_topsteel'

    this.dataSource = new DataSource({
      type: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      username: process.env.DB_USERNAME || 'postgres',
      password: process.env.DB_PASSWORD || 'postgres',
      database: dbName,
      logging: this.config.logLevel === 'debug',
    })

    // Configuration base de donn√©es auth (pour param√®tres syst√®me)
    const authDbName = process.env.DB_AUTH_NAME || 'erp_topsteel_auth'

    this.authDataSource = new DataSource({
      type: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      username: process.env.DB_USERNAME || 'postgres',
      password: process.env.DB_PASSWORD || 'postgres',
      database: authDbName,
      logging: this.config.logLevel === 'debug',
    })
  }

  /**
   * Initialisation compl√®te
   */
  async initialize(): Promise<void> {
    this.logger.info(
      InjectionLoggerService.createBanner('INITIALISATION ORCHESTRATEUR M√âTALLURGIE')
    )

    try {
      // Connexions base de donn√©es
      await this.dataSource.initialize()
      await this.authDataSource.initialize()
      this.logger.info('‚úÖ Connexion base de donn√©es √©tablie')

      // V√©rification structure
      await this.verifyDatabaseStructure()

      // Injection param√®tres syst√®me si n√©cessaire
      await this.injectSystemParameters()

      // R√©cup√©ration ID soci√©t√© par d√©faut
      await this.loadDefaultSocietyId()

      this.logger.info('‚úÖ Initialisation termin√©e avec succ√®s')
    } catch (error) {
      this.logger.error("‚ùå Erreur lors de l'initialisation", error as Error)
      throw error
    }
  }

  /**
   * Injection compl√®te de tous les articles
   */
  async injectAllArticles(): Promise<void> {
    this.logger.info(InjectionLoggerService.createBanner('INJECTION COMPL√àTE ARTICLES M√âTALLURGIE'))

    const startTime = Date.now()

    try {
      // Phase 1: Injection param√®tres syst√®me
      await this.injectSystemParameters()

      // Phase 2: Injection articles par famille
      const injectors = [
        new IpeProfilesInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
        new HeaHebProfilesInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
        new UpnProfilesInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
        new IpnProfilesInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
        new AnglesInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
        new BarsInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
        new TubesInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
        new SheetsInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
        new ShsRhsProfilesInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
        new TSectionsInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
        new ZProfilesInjector(
          this.dataSource,
          this.config,
          this.logger,
          this.validator,
          this.pricingCalculator
        ),
      ]

      for (const injector of injectors) {
        this.logger.info(
          `\nüîÑ D√©marrage injection: ${injector.getFamilleInfo().famille}/${injector.getFamilleInfo().sousFamille}`
        )

        try {
          const result = await injector.inject()
          this.results.push(result)

          if (result.errors.length === 0) {
            this.logger.info(`‚úÖ Injection r√©ussie: ${result.articlesCreated} articles cr√©√©s`)
          } else {
            this.logger.warn(
              `‚ö†Ô∏è Injection avec erreurs: ${result.articlesCreated} cr√©√©s, ${result.errors.length} erreurs`
            )
          }
        } catch (error) {
          this.logger.error(
            `‚ùå √âchec injection ${injector.getFamilleInfo().famille}`,
            error as Error
          )
          if (!this.config.skipOnError) {
            throw error
          }
        }
      }

      // Phase 3: G√©n√©ration rapport final
      await this.generateFinalReport()

      const totalDuration = Date.now() - startTime
      this.logger.info(
        `\nüéâ INJECTION TERMIN√âE en ${InjectionLoggerService.formatDuration(totalDuration)}`
      )
    } catch (error) {
      this.logger.error("üí• Erreur fatale lors de l'injection", error as Error)
      throw error
    }
  }

  /**
   * V√©rification structure base de donn√©es
   */
  private async verifyDatabaseStructure(): Promise<void> {
    this.logger.info('üîç V√©rification structure base de donn√©es...')

    // V√©rifier table articles
    const articlesExists = await this.tableExists('articles')
    if (!articlesExists) {
      throw new Error("Table articles introuvable. Ex√©cutez d'abord les migrations TypeORM.")
    }

    // Les param√®tres syst√®me sont maintenant dans la base auth (parameters_system)
    // Plus besoin de v√©rifier system_settings dans la base tenant

    // V√©rifier colonnes essentielles
    await this.verifyArticlesColumns()

    this.logger.info('‚úÖ Structure base de donn√©es valid√©e')
  }

  /**
   * Injection des param√®tres syst√®me
   */
  private async injectSystemParameters(): Promise<void> {
    this.logger.info('üìã Injection param√®tres syst√®me...')

    // Utiliser l'injection programmatique basique pour √©viter les probl√®mes SQL
    await this.injectBasicSystemParameters()
    this.logger.info('‚úÖ Param√®tres syst√®me inject√©s')
  }

  /**
   * G√©n√©ration rapport final
   */
  private async generateFinalReport(): Promise<void> {
    this.logger.info(InjectionLoggerService.createBanner("RAPPORT FINAL D'INJECTION"))

    const successful = this.results.filter((r) => r.errors.length === 0)
    const withErrors = this.results.filter((r) => r.errors.length > 0)
    const totalArticles = this.results.reduce((sum, r) => sum + r.articlesCreated, 0)
    const totalErrors = this.results.reduce((sum, r) => sum + r.errors.length, 0)
    const totalDuration = this.results.reduce((sum, r) => sum + r.duration, 0)

    // Statistiques g√©n√©rales
    this.logger.info(`üìä STATISTIQUES G√âN√âRALES`)
    this.logger.info(
      `   ‚úÖ Familles trait√©es avec succ√®s: ${successful.length}/${this.results.length}`
    )
    this.logger.info(`   ‚ö†Ô∏è  Familles avec erreurs: ${withErrors.length}/${this.results.length}`)
    this.logger.info(`   üì¶ Total articles cr√©√©s: ${totalArticles}`)
    this.logger.info(`   ‚ùå Total erreurs: ${totalErrors}`)
    this.logger.info(`   ‚è±Ô∏è  Dur√©e totale: ${InjectionLoggerService.formatDuration(totalDuration)}`)

    // D√©tail par famille
    this.logger.info(`\nüìã D√âTAIL PAR FAMILLE:`)
    this.results.forEach((result) => {
      const status = result.errors.length === 0 ? '‚úÖ' : '‚ö†Ô∏è'
      const rate =
        result.articlesCreated + result.articlesSkipped > 0
          ? Math.round(
              (result.articlesCreated / (result.articlesCreated + result.articlesSkipped)) * 100
            )
          : 0

      this.logger.info(
        `   ${status} ${result.famille}/${result.sousFamille}: ${result.articlesCreated} cr√©√©s (${rate}% succ√®s)`
      )

      if (result.examples.length > 0) {
        this.logger.info(
          `      üí° Exemple: ${result.examples[0].reference} - ${result.examples[0].price}‚Ç¨`
        )
      }
    })

    // Statistiques base de donn√©es
    await this.logDatabaseStatistics()

    // R√©sum√© logger
    const logSummary = this.logger.getLogSummary()
    this.logger.info(`\nüìù STATISTIQUES LOGS:`)
    this.logger.info(`   üìä Total messages: ${logSummary.totalLogs}`)
    this.logger.info(`   üîç Debug: ${logSummary.byLevel.DEBUG || 0}`)
    this.logger.info(`   ‚ÑπÔ∏è  Info: ${logSummary.byLevel.INFO || 0}`)
    this.logger.info(`   ‚ö†Ô∏è  Warn: ${logSummary.byLevel.WARN || 0}`)
    this.logger.info(`   ‚ùå Error: ${logSummary.byLevel.ERROR || 0}`)

    // M√©moire si disponible
    this.logger.logMemoryUsage()
  }

  /**
   * Statistiques base de donn√©es
   */
  private async logDatabaseStatistics(): Promise<void> {
    try {
      this.logger.info(`\nüíΩ STATISTIQUES BASE DE DONN√âES:`)

      // Total articles
      const totalResult = await this.dataSource.query(
        `
        SELECT COUNT(*) as count FROM articles WHERE societe_id = $1
      `,
        [this.config.societeId]
      )

      this.logger.info(`   üì¶ Articles total: ${totalResult[0].count}`)

      // Par famille
      const familyResult = await this.dataSource.query(
        `
        SELECT 
          famille,
          COUNT(*) as count,
          ROUND(AVG(prix_vente_ht), 2) as prix_moyen,
          ROUND(SUM(prix_vente_ht), 2) as valeur_totale
        FROM articles 
        WHERE societe_id = $1
        GROUP BY famille
        ORDER BY count DESC
      `,
        [this.config.societeId]
      )

      familyResult.forEach((stat: any) => {
        this.logger.info(
          `   üìÅ ${stat.famille}: ${stat.count} articles (moy: ${stat.prix_moyen}‚Ç¨, total: ${stat.valeur_totale}‚Ç¨)`
        )
      })

      // Param√®tres syst√®me
      const paramsResult = await this.dataSource.query(`
        SELECT category, COUNT(*) as count 
        FROM system_settings 
        WHERE is_active = true 
        GROUP BY category
      `)

      if (paramsResult.length > 0) {
        this.logger.info(`   ‚öôÔ∏è  Param√®tres syst√®me:`)
        paramsResult.forEach((param: any) => {
          this.logger.info(`      - ${param.category}: ${param.count}`)
        })
      }
    } catch (error) {
      this.logger.warn('Impossible de r√©cup√©rer les statistiques base de donn√©es', error)
    }
  }

  /**
   * M√©thodes utilitaires
   */
  private async tableExists(tableName: string): Promise<boolean> {
    try {
      const result = await this.dataSource.query(
        `
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = $1
        )
      `,
        [tableName]
      )
      return result[0].exists
    } catch {
      return false
    }
  }

  private async verifyArticlesColumns(): Promise<void> {
    const requiredColumns = [
      'id',
      'reference',
      'designation',
      'type',
      'status',
      'famille',
      'sous_famille',
      'unite_stock',
      'gere_en_stock',
      'caracteristiques_techniques',
      'societe_id',
    ]

    const result = await this.dataSource.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'articles'
    `)

    const existingColumns = result.map((row: any) => row.column_name)
    const missingColumns = requiredColumns.filter((col) => !existingColumns.includes(col))

    if (missingColumns.length > 0) {
      throw new Error(`Colonnes manquantes dans table articles: ${missingColumns.join(', ')}`)
    }
  }

  // Fonction supprim√©e - les param√®tres syst√®me sont maintenant dans parameters_system (base auth)

  private async injectBasicSystemParameters(): Promise<void> {
    const parameters: SystemParameter[] = [
      {
        category: 'MATERIALS',
        key: 'STEEL_GRADES',
        value: { grades: ['S235JR', 'S275JR', 'S355JR', 'S460JR'] },
        label: 'Nuances acier construction',
        type: 'ARRAY',
        isActive: true,
      },
      {
        category: 'MATERIALS',
        key: 'STAINLESS_GRADES',
        value: { grades: ['304', '304L', '316', '316L', '430'] },
        label: 'Nuances inox',
        type: 'ARRAY',
        isActive: true,
      },
      {
        category: 'UNITS',
        key: 'STOCK_UNITS',
        value: { units: ['PCS', 'KG', 'M', 'ML', 'M2', 'M3'] },
        label: 'Unit√©s de stock',
        type: 'ARRAY',
        isActive: true,
      },
    ]

    for (const param of parameters) {
      // V√©rifier si le param√®tre existe d√©j√† dans la base auth
      const existingParam = await this.authDataSource.query(
        `
        SELECT id FROM parameters_system WHERE "group" = $1 AND key = $2
      `,
        [param.category, param.key]
      )

      if (existingParam.length === 0) {
        // Ins√©rer nouveau param√®tre dans la base auth
        await this.authDataSource.query(
          `
          INSERT INTO parameters_system (
            "group", key, value, type, scope, description, 
            "arrayValues", "isActive", "isReadonly", "defaultLanguage"
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
        `,
          [
            param.category, // group
            param.key,
            JSON.stringify(param.value), // value
            param.type, // type
            'SYSTEM', // scope
            param.label, // description
            param.value, // arrayValues
            param.isActive,
            false, // isReadonly
            'fr', // defaultLanguage
          ]
        )
      }
    }
  }

  private async loadDefaultSocietyId(): Promise<void> {
    // Si pas d'ID soci√©t√© sp√©cifique, utiliser celui par d√©faut
    if (this.config.societeId === 'default-societe-id') {
      try {
        // Essayer de r√©cup√©rer depuis la base auth si accessible
        const result = await this.dataSource.query(`
          SELECT id FROM societes WHERE code = 'TOPSTEEL' LIMIT 1
        `)

        if (result.length > 0) {
          this.config.societeId = result[0].id
          this.logger.info(`‚úÖ ID soci√©t√© charg√©: ${this.config.societeId}`)
        } else {
          // G√©n√©rer un UUID par d√©faut valide
          const uuidResult = await this.dataSource.query('SELECT gen_random_uuid() as id')
          this.config.societeId = uuidResult[0].id
          this.logger.warn(`‚ö†Ô∏è UUID soci√©t√© g√©n√©r√© par d√©faut: ${this.config.societeId}`)
        }
      } catch (error) {
        // Utiliser un UUID fixe valide en cas d'erreur
        this.config.societeId = 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
        this.logger.warn(`‚ö†Ô∏è Utilisation UUID soci√©t√© fixe: ${this.config.societeId}`)
      }
    }
  }

  /**
   * Nettoyage et fermeture
   */
  async cleanup(): Promise<void> {
    if (this.dataSource.isInitialized) {
      await this.dataSource.destroy()
    }
    if (this.authDataSource.isInitialized) {
      await this.authDataSource.destroy()
    }
    this.logger.info('üîå Connexions base de donn√©es ferm√©es')
  }

  /**
   * Export des logs
   */
  exportLogs(): string {
    return this.logger.exportLogs()
  }

  /**
   * Obtenir les r√©sultats
   */
  getResults(): InjectionResult[] {
    return this.results
  }
}

// Ex√©cution du script
async function main() {
  const orchestrator = new CleanMetallurgyInjector()

  try {
    await orchestrator.initialize()
    await orchestrator.injectAllArticles()

    console.log('\n' + InjectionLoggerService.createBanner('INJECTION TERMIN√âE AVEC SUCC√àS'))
  } catch (error) {
    console.error('\nüí• ERREUR FATALE:', error)
    process.exit(1)
  } finally {
    await orchestrator.cleanup()
  }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  main().catch(console.error)
}
