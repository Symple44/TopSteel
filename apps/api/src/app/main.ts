import { join } from 'node:path'
// apps/api/src/main.ts
import { Logger, ValidationPipe } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { NestFactory } from '@nestjs/core'
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger'
import compression from 'compression'
import cookieParser from 'cookie-parser'
import { config } from 'dotenv'
import express, { type NextFunction, type Request, type Response } from 'express'
import helmet from 'helmet'
import { HttpExceptionFilter } from '../core/common/filters/http-exception.filter'
import { LoggingInterceptor } from '../core/common/interceptors/logging.interceptor'
import { TransformInterceptor } from '../core/common/interceptors/transform.interceptor'
import { cleanupPort, isPortAvailable } from '../core/config/enhanced-server-manager'
import { envValidator } from '../core/config/env-validator'
import { GracefulShutdownService } from '../core/config/graceful-shutdown.service'
import { listenWithPortFallback } from '../core/config/port-helper'
import { MetricsSafeInterceptor } from '../infrastructure/monitoring/metrics-safe.interceptor'
import { EnhancedThrottlerGuard } from '../infrastructure/security/guards/enhanced-throttler.guard'
import { SanitizedLoggingInterceptor } from '../infrastructure/security/log-sanitization/sanitized-logging.interceptor'
import { AppModule } from './app.module'

// ============================================================================
// CHARGEMENT VARIABLES D'ENVIRONNEMENT MONOREPO
// ============================================================================
// Ajustement du chemin selon l'environnement avec path.resolve pour Windows
const isCompiled = __dirname.includes('dist')
let rootDir: string

try {
  if (isCompiled) {
    // En production: dist/main.js -> ../../../../
    rootDir = join(__dirname, '../../../../')
  } else {
    // En d√©veloppement: src/main.ts -> ../../../
    rootDir = join(__dirname, '../../../')
  }

  // Normaliser le chemin pour Windows
  rootDir = rootDir.replace(/\\/g, '/')

  const envLocalPath = join(rootDir, '.env.local')

  // Chargement silencieux des variables d'environnement
  config({ path: envLocalPath, quiet: true })
  config({ path: join(rootDir, '.env'), quiet: true })
} catch {
  // Fallback: essayer de charger depuis le r√©pertoire courant
  config({ path: '.env.local', quiet: true })
  config({ path: '.env', quiet: true })
}

async function bootstrap() {
  const logger = new Logger('Bootstrap')

  // ============================================================================
  // VALIDATION S√âCURIS√âE DES VARIABLES D'ENVIRONNEMENT
  // ============================================================================

  try {
    logger.log("üîç Validation des variables d'environnement...")

    // Valider les variables d'environnement avec rapport de s√©curit√©
    const validationResult = await envValidator.validate({
      throwOnError: false,
      logValidation: false,
      validateSecrets: true,
    })

    if (validationResult.success) {
      logger.log("‚úÖ Variables d'environnement valid√©es avec succ√®s")

      // Afficher les avertissements de s√©curit√© s'il y en a
      if (validationResult.warnings && validationResult.warnings.length > 0) {
        logger.warn('‚ö†Ô∏è  Avertissements de s√©curit√© d√©tect√©s:')
        for (const warning of validationResult.warnings) {
          logger.warn(`  ‚Ä¢ ${warning}`)
        }

        if (process.env.NODE_ENV === 'production') {
          logger.warn(
            'üîê IMPORTANT: Corrigez ces probl√®mes de s√©curit√© avant le d√©ploiement en production!'
          )
        }
      }
    } else {
      logger.error("‚ùå √âchec de la validation des variables d'environnement:")
      if (validationResult.errors) {
        for (const error of validationResult.errors) {
          logger.error(`  ‚Ä¢ ${error}`)
        }
      }

      if (process.env.NODE_ENV === 'production') {
        logger.error("üö® ARR√äT: Variables d'environnement invalides en production")
        process.exit(1)
      } else {
        logger.warn('‚ö†Ô∏è  Continuation en d√©veloppement avec des variables invalides')
      }
    }
  } catch (error) {
    logger.error("‚ùå Erreur lors de la validation des variables d'environnement:", error)
    if (process.env.NODE_ENV === 'production') {
      process.exit(1)
    }
  }

  try {
    // Nettoyage silencieux sauf si probl√®me d√©tect√©
    const targetPort = parseInt(process.env.PORT || process.env.API_PORT || '3002', 10)

    // V√©rifier d'abord la disponibilit√© du port
    const isPortFree = await isPortAvailable(targetPort)

    if (!isPortFree) {
      logger.log(`üîç Port ${targetPort} occup√©, nettoyage...`)

      // Nettoyage complet du port avec retry
      const success = await cleanupPort(targetPort, 2)
      if (!success) {
        logger.warn(`‚ö†Ô∏è  Port ${targetPort} occup√©, utilisation du fallback automatique`)
      }
    }
  } catch (error) {
    logger.warn(`‚ö†Ô∏è  Erreur lors du nettoyage initial: ${error}`)
  }

  const app = await NestFactory.create(AppModule, {
    logger: ['error', 'warn', 'log', 'debug', 'verbose'],
  })

  // D√©sactiver compl√®tement les redirections automatiques d'Express
  const expressApp = app.getHttpAdapter().getInstance()
  expressApp.set('strict routing', false)
  expressApp.set('x-powered-by', false)

  // Middleware pour g√©rer les trailing slashes sans redirection
  expressApp.use((req: Request, _res: Response, next: NextFunction) => {
    // Supprimer le trailing slash si pr√©sent (sauf pour la racine)
    if (req.path !== '/' && req.path.endsWith('/')) {
      req.url = req.url.slice(0, -1)
      // Note: req.path est en lecture seule, on modifie seulement req.url
    }
    next()
  })

  const configService = app.get(ConfigService)
  const port = configService.get<number>('app.port', 3002)
  const env = configService.get<string>('app.env', 'development')
  const corsOrigin =
    configService.get<string>('app.cors.origin') ||
    process.env.FRONTEND_URL ||
    process.env.API_CORS_ORIGIN ||
    'http://127.0.0.1:3005'

  // ============================================================================
  // S√âCURIT√â ET MIDDLEWARE
  // ============================================================================

  // Helmet pour la s√©curit√© de base (CSP g√©r√© par notre middleware personnalis√©)
  app.use(
    helmet({
      contentSecurityPolicy: false, // D√©sactiv√© - g√©r√© par notre middleware CSP personnalis√©
      crossOriginEmbedderPolicy: env === 'production',
      crossOriginOpenerPolicy: { policy: 'same-origin' },
      crossOriginResourcePolicy: { policy: 'cross-origin' },
      dnsPrefetchControl: { allow: false },
      frameguard: { action: 'deny' },
      hidePoweredBy: true,
      hsts: env === 'production',
    })
  )

  // Compression pour les performances
  app.use(compression())

  // Cookie parser pour CSRF
  app.use(cookieParser())

  // S'assurer que le parsing JSON est activ√© avec une limite raisonnable
  app.use(express.json({ limit: '10mb' }))
  app.use(express.urlencoded({ extended: true, limit: '10mb' }))

  // Configuration CORS
  app.enableCors({
    origin: env === 'development' ? [corsOrigin, 'null'] : corsOrigin, // Permettre 'null' en d√©veloppement pour les fichiers locaux
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  })

  // ============================================================================
  // CONFIGURATION GLOBALE
  // ============================================================================

  // Configuration du pr√©fixe global
  app.setGlobalPrefix('api')

  // ============================================================================
  // VALIDATION ET INTERCEPTORS GLOBAUX
  // ============================================================================

  app.useGlobalPipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: false, // Temporairement d√©sactiv√© pour debug
      transformOptions: {
        enableImplicitConversion: true,
      },
      validationError: {
        target: false,
        value: false,
      },
      disableErrorMessages: false, // S'assurer que les messages d'erreur sont visibles
    })
  )

  // Interceptors globaux
  // Utiliser l'intercepteur sanitis√© en production, le standard en d√©veloppement
  if (process.env.NODE_ENV === 'production') {
    app.useGlobalInterceptors(app.get(SanitizedLoggingInterceptor))
  } else {
    app.useGlobalInterceptors(new LoggingInterceptor())
  }
  app.useGlobalInterceptors(new TransformInterceptor())
  app.useGlobalInterceptors(app.get(MetricsSafeInterceptor))

  // Filtres globaux
  app.useGlobalFilters(new HttpExceptionFilter())

  // Guards globaux - Utiliser le guard standard pour √©viter les complications
  app.useGlobalGuards(app.get(EnhancedThrottlerGuard))

  // ============================================================================
  // DOCUMENTATION SWAGGER
  // ============================================================================

  if (env !== 'production') {
    // Configuration API unique
    const config = new DocumentBuilder()
      .setTitle('üè≠ TopSteel ERP API')
      .setDescription(
        `
        **API de gestion m√©tallurgique industrielle**
        
        üîê **Authentification:**
        - Bearer Token JWT requis pour la plupart des endpoints
        - Utilisez \`/api/auth/login\` pour obtenir un token
      `
      )
      .setVersion('1.0.0')
      .setContact('√âquipe TopSteel', 'https://oweo-consulting.fr', 'support@oweo-consulting.fr')
      .addBearerAuth(
        {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          name: 'JWT',
          description: 'Token JWT obtenu via /api/auth/login',
          in: 'header',
        },
        'JWT-auth'
      )
      .addTag('üîê Auth', 'Authentification et autorisation')
      .addTag('üë§ Users', 'Gestion des utilisateurs et r√¥les')
      .addTag('ü§ù Partenaires', 'Gestion des clients et fournisseurs')
      .addTag('üì¶ Articles', 'Gestion des articles et inventaire')
      .addTag('üè≠ Mat√©riaux', 'Catalogue des mat√©riaux industriels')
      .addTag('üìÅ Projets', 'Gestion des projets m√©tallurgiques')
      .addTag('üõí Commandes', 'Gestion des commandes fournisseurs')
      .addTag('üè≠ Production', 'Gestion de la production et fabrication')
      .addTag('üè≠ Ordre de fabrication', 'Gestion des ordres de fabrication')
      .addTag('üì¶ Stocks', 'Gestion des stocks et inventaire')
      .addTag('üì¶ Produits', 'Gestion des produits')
      .addTag('üîß Machines', 'Gestion du parc machines')
      .addTag('‚öôÔ∏è Maintenance', 'Planification et suivi maintenance')
      .addTag('üìÖ Planning', 'Planification et calendrier')
      .addTag('‚úÖ Qualit√©', 'Contr√¥le qualit√© et conformit√©')
      .addTag('üìã Tra√ßabilit√©', 'Tra√ßabilit√© des produits')
      .addTag('üí∞ Devis', 'Cr√©ation et gestion des devis')
      .addTag('üßæ Facturation', 'Facturation et comptabilit√©')
      .addTag('üìÑ Documents', 'Gestion √©lectronique de documents')
      .addTag('üîî Notifications', 'Syst√®me de notifications')
      .addServer(`${process.env.API_URL || `http://127.0.0.1:${port}`}/api`, 'API TopSteel ERP')
      .build()

    // G√©n√©ration du document Swagger
    const document = SwaggerModule.createDocument(app, config, {
      operationIdFactory: (_controllerKey: string, methodKey: string) => methodKey,
    })

    // Configuration de l'interface Swagger
    const swaggerOptions = {
      swaggerOptions: {
        persistAuthorization: true,
        displayRequestDuration: true,
        docExpansion: 'none',
        filter: true,
        showRequestHeaders: true,
        syntaxHighlight: {
          theme: 'tomorrow-night',
        },
        tryItOutEnabled: true,
      },
      customCss: `
        .swagger-ui .topbar { display: none; }
        .swagger-ui .info .title { color: #1976d2; }
        .swagger-ui .scheme-container { background: #f5f5f5; padding: 10px; }
      `,
      customSiteTitle: 'TopSteel ERP API Documentation',
    }

    // Setup documentation unique
    SwaggerModule.setup('api/docs', app, document, swaggerOptions)

    const serverUrl = process.env.API_URL || `http://127.0.0.1:${port}`
    logger.log(`üìö Documentation Swagger: ${serverUrl}/api/docs`)
  }

  // Syst√®me de graceful shutdown am√©lior√©
  const gracefulShutdownService = new GracefulShutdownService()

  // Gestion intelligente des ports avec fallback
  const actualPort = await listenWithPortFallback(app, configService, logger)

  // Configurer le service de shutdown avec les infos de l'app
  gracefulShutdownService.setApp(app, actualPort)
  gracefulShutdownService.setupSignalHandlers()

  // Mise √† jour des logs avec le port r√©el
  const portForLogs = actualPort

  // ============================================================================
  // LOGS DE D√âMARRAGE INFORMATIFS
  // ============================================================================

  logger.log('')
  logger.log('üè≠ ===============================================')
  logger.log('üè≠           TOPSTEEL ERP API')
  logger.log('üè≠ ===============================================')
  logger.log(`üöÄ Serveur d√©marr√©: ${process.env.API_URL || `http://127.0.0.1:${portForLogs}`}`)
  logger.log(`üåü Environnement: ${env}`)
  logger.log(`üîó CORS Origin: ${corsOrigin}`)
  logger.log('')
  logger.log('üìç URLs API disponibles:')
  logger.log('   ‚Ä¢ /api/auth            ‚Üí Authentification')
  logger.log('   ‚Ä¢ /api/users           ‚Üí Gestion utilisateurs')
  logger.log('   ‚Ä¢ /api/business/*      ‚Üí Modules m√©tier')
  logger.log('   ‚Ä¢ /api/admin/*         ‚Üí Administration')
  logger.log('')
  logger.log('üìö Documentation:')
  logger.log('   ‚Ä¢ /api/docs            ‚Üí Documentation Swagger')
  logger.log('')
  logger.log('üìä Monitoring:')
  logger.log('   ‚Ä¢ /health              ‚Üí Health check')
  logger.log('')
  logger.log('üè≠ ===============================================')
  logger.log('')
}

bootstrap().catch(() => {
  process.exit(1)
})
