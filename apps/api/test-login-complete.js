const API_URL = 'http://localhost:3002'

async function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms))
}

async function testCompleteFlow() {
  console.log("üß™ Test complet du flux d'authentification TopSteel\n")
  console.log('================================\n')

  try {
    // 1. LOGIN
    console.log('üìù √âTAPE 1: LOGIN')
    console.log('   Email: admin@topsteel.tech')
    console.log('   Password: TopSteel44!')

    const loginResponse = await fetch(`${API_URL}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        login: 'admin@topsteel.tech',
        password: 'TopSteel44!',
      }),
    })

    if (!loginResponse.ok) {
      const error = await loginResponse.text()
      console.error(`\n‚ùå LOGIN √âCHOU√â: ${loginResponse.status}`)
      console.error('R√©ponse:', error)
      return
    }

    const loginData = await loginResponse.json()
    console.log('\n‚úÖ LOGIN R√âUSSI!')
    console.log(`   - User ID: ${loginData.data.user.id}`)
    console.log(`   - Email: ${loginData.data.user.email}`)
    console.log(`   - Role: ${loginData.data.user.role}`)
    console.log(`   - Token: ${loginData.data.accessToken.substring(0, 50)}...`)

    const accessToken = loginData.data.accessToken
    await sleep(1000)

    // 2. R√âCUP√âRATION DES SOCI√âT√âS
    console.log('\n================================')
    console.log('\nüìù √âTAPE 2: R√âCUP√âRATION DES SOCI√âT√âS')

    const societesResponse = await fetch(`${API_URL}/api/auth/societes`, {
      headers: { Authorization: `Bearer ${accessToken}` },
    })

    if (!societesResponse.ok) {
      const error = await societesResponse.text()
      console.error(`\n‚ùå R√âCUP√âRATION SOCI√âT√âS √âCHOU√âE: ${societesResponse.status}`)
      console.error('R√©ponse:', error)
      return
    }

    const societesData = await societesResponse.json()
    console.log(`\n‚úÖ ${societesData.data.length} SOCI√âT√â(S) TROUV√âE(S):`)

    societesData.data.forEach((societe, index) => {
      console.log(`   ${index + 1}. ${societe.nom} (${societe.code})`)
      console.log(`      - ID: ${societe.id}`)
      console.log(`      - Role: ${societe.role}`)
      console.log(`      - Default: ${societe.isDefault}`)
    })

    if (societesData.data.length === 0) {
      console.error('\n‚ùå Aucune soci√©t√© trouv√©e pour cet utilisateur')
      return
    }

    const firstSociete = societesData.data[0]
    await sleep(1000)

    // 3. S√âLECTION DE SOCI√âT√â
    console.log('\n================================')
    console.log('\nüìù √âTAPE 3: S√âLECTION DE SOCI√âT√â')
    console.log(`   S√©lection de: ${firstSociete.nom}`)

    const selectResponse = await fetch(`${API_URL}/api/auth/login-societe/${firstSociete.id}`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({}),
    })

    if (!selectResponse.ok) {
      const error = await selectResponse.text()
      console.error(`\n‚ùå S√âLECTION SOCI√âT√â √âCHOU√âE: ${selectResponse.status}`)
      console.error('R√©ponse:', error)
      return
    }

    const selectData = await selectResponse.json()
    console.log('\n‚úÖ SOCI√âT√â S√âLECTIONN√âE!')
    console.log(`   - Soci√©t√©: ${selectData.data.user.societe.nom}`)
    console.log(`   - Nouveau token g√©n√©r√©`)

    const multiTenantToken = selectData.data.tokens.accessToken
    await sleep(1000)

    // 4. V√âRIFICATION DU TOKEN
    console.log('\n================================')
    console.log('\nüìù √âTAPE 4: V√âRIFICATION DU TOKEN MULTI-TENANT')

    const verifyResponse = await fetch(`${API_URL}/api/auth/verify`, {
      headers: { Authorization: `Bearer ${multiTenantToken}` },
    })

    if (!verifyResponse.ok) {
      const error = await verifyResponse.text()
      console.error(`\n‚ùå V√âRIFICATION TOKEN √âCHOU√âE: ${verifyResponse.status}`)
      console.error('R√©ponse:', error)
      return
    }

    const verifyData = await verifyResponse.json()
    console.log('\n‚úÖ TOKEN VALIDE!')
    console.log(`   - Email: ${verifyData.data.email}`)
    console.log(`   - Role: ${verifyData.data.role}`)
    console.log(`   - ID: ${verifyData.data.id}`)

    // R√âSUM√â FINAL
    console.log('\n================================')
    console.log('\nüéâ TOUS LES TESTS R√âUSSIS!')
    console.log('\nüìä R√âSUM√â:')
    console.log('   ‚úÖ Login avec admin@topsteel.tech')
    console.log('   ‚úÖ R√©cup√©ration des soci√©t√©s')
    console.log('   ‚úÖ S√©lection de soci√©t√©')
    console.log('   ‚úÖ Token multi-tenant fonctionnel')
    console.log("\nüöÄ LE SYST√àME D'AUTHENTIFICATION EST OP√âRATIONNEL!")
  } catch (error) {
    console.error('\n‚ùå ERREUR INATTENDUE:', error.message)
    console.error(error.stack)
  }
}

// D√©marrer le test
console.log('‚è≥ Connexion au serveur API...\n')
fetch(`${API_URL}/api/health`)
  .then((response) => {
    if (response.ok) {
      console.log('‚úÖ Serveur API accessible\n')
      testCompleteFlow()
    } else {
      throw new Error('Serveur retourne ' + response.status)
    }
  })
  .catch((error) => {
    console.error("‚ùå ERREUR: Le serveur n'est pas accessible sur", API_URL)
    console.error('   Assurez-vous que le serveur est d√©marr√© avec: pnpm dev')
  })
