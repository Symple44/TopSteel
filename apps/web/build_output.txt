
> @erp/web@1.0.0 prebuild
> biome check src/ --diagnostic-level=warn || echo Continue malgre warnings

src\app\(auth)\login\login-client.tsx:27:40 lint/correctness/noUnsafeOptionalChaining ━━━━━━━━━━━━━━

  × Unsafe usage of optional chaining.
  
    25 │   } = useAuth()
    26 │   const { t } = useTranslation('auth')
  > 27 │   const [formData, setFormData] = React?.useState({
       │                                        ^^
    28 │     identifier: '', // Peut être email ou acronyme
    29 │     password: '',
  
  i If it short-circuits with 'undefined' the evaluation will throw TypeError here:
  
    25 │   } = useAuth()
    26 │   const { t } = useTranslation('auth')
  > 27 │   const [formData, setFormData] = React?.useState({
       │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 28 │     identifier: '', // Peut être email ou acronyme
  > 29 │     password: '',
  > 30 │     rememberMe: false,
  > 31 │   })
       │   ^^
    32 │   const [showPassword, setShowPassword] = React?.useState(false)
    33 │   const [isLoading, setIsLoading] = React?.useState(false)
  

src\app\(auth)\login\login-client.tsx:32:48 lint/correctness/noUnsafeOptionalChaining ━━━━━━━━━━━━━━

  × Unsafe usage of optional chaining.
  
    30 │     rememberMe: false,
    31 │   })
  > 32 │   const [showPassword, setShowPassword] = React?.useState(false)
       │                                                ^^
    33 │   const [isLoading, setIsLoading] = React?.useState(false)
    34 │   const [mfaCode, setMfaCode] = React?.useState('')
  
  i If it short-circuits with 'undefined' the evaluation will throw TypeError here:
  
    30 │     rememberMe: false,
    31 │   })
  > 32 │   const [showPassword, setShowPassword] = React?.useState(false)
       │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    33 │   const [isLoading, setIsLoading] = React?.useState(false)
    34 │   const [mfaCode, setMfaCode] = React?.useState('')
  

src\app\(auth)\login\login-client.tsx:33:42 lint/correctness/noUnsafeOptionalChaining ━━━━━━━━━━━━━━

  × Unsafe usage of optional chaining.
  
    31 │   })
    32 │   const [showPassword, setShowPassword] = React?.useState(false)
  > 33 │   const [isLoading, setIsLoading] = React?.useState(false)
       │                                          ^^
    34 │   const [mfaCode, setMfaCode] = React?.useState('')
    35 │   const [selectedMfaMethod, setSelectedMfaMethod] = React?.useState('')
  
  i If it short-circuits with 'undefined' the evaluation will throw TypeError here:
  
    31 │   })
    32 │   const [showPassword, setShowPassword] = React?.useState(false)
  > 33 │   const [isLoading, setIsLoading] = React?.useState(false)
       │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    34 │   const [mfaCode, setMfaCode] = React?.useState('')
    35 │   const [selectedMfaMethod, setSelectedMfaMethod] = React?.useState('')
  

src\app\(auth)\login\login-client.tsx:34:38 lint/correctness/noUnsafeOptionalChaining ━━━━━━━━━━━━━━

  × Unsafe usage of optional chaining.
  
    32 │   const [showPassword, setShowPassword] = React?.useState(false)
    33 │   const [isLoading, setIsLoading] = React?.useState(false)
  > 34 │   const [mfaCode, setMfaCode] = React?.useState('')
       │                                      ^^
    35 │   const [selectedMfaMethod, setSelectedMfaMethod] = React?.useState('')
    36 │   const [isRedirecting, setIsRedirecting] = React?.useState(false)
  
  i If it short-circuits with 'undefined' the evaluation will throw TypeError here:
  
    32 │   const [showPassword, setShowPassword] = React?.useState(false)
    33 │   const [isLoading, setIsLoading] = React?.useState(false)
  > 34 │   const [mfaCode, setMfaCode] = React?.useState('')
       │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    35 │   const [selectedMfaMethod, setSelectedMfaMethod] = React?.useState('')
    36 │   const [isRedirecting, setIsRedirecting] = React?.useState(false)
  

src\app\(auth)\register\page.tsx:140:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    138 │                 <div className="space-y-2">
    139 │                   <Label htmlFor="firstName">{t('firstNameRequired')}</Label>
  > 140 │                   <Input
        │                   ^^^^^^
  > 141 │                     id="firstName"
         ...
  > 145 │                     required
  > 146 │                   />
        │                   ^^
    147 │                 </div>
    148 │ 
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(auth)\register\page.tsx:151:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    149 │                 <div className="space-y-2">
    150 │                   <Label htmlFor="lastName">{t('lastNameRequired')}</Label>
  > 151 │                   <Input
        │                   ^^^^^^
  > 152 │                     id="lastName"
         ...
  > 156 │                     required
  > 157 │                   />
        │                   ^^
    158 │                 </div>
    159 │               </div>
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(auth)\register\page.tsx:165:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    163 │                 <div className="relative">
    164 │                   <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
  > 165 │                   <Input
        │                   ^^^^^^
  > 166 │                     id="email"
         ...
  > 172 │                     required
  > 173 │                   />
        │                   ^^
    174 │                 </div>
    175 │               </div>
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(auth)\register\page.tsx:181:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    179 │                 <div className="relative">
    180 │                   <Building2 className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
  > 181 │                   <Input
        │                   ^^^^^^
  > 182 │                     id="company"
         ...
  > 186 │                     className="pl-10"
  > 187 │                   />
        │                   ^^
    188 │                 </div>
    189 │               </div>
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(auth)\register\page.tsx:195:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    193 │                 <div className="relative">
    194 │                   <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
  > 195 │                   <Input
        │                   ^^^^^^
  > 196 │                     id="password"
         ...
  > 202 │                     required
  > 203 │                   />
        │                   ^^
    204 │                   <button
    205 │                     type="button"
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(auth)\register\page.tsx:219:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    217 │                 <div className="relative">
    218 │                   <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
  > 219 │                   <Input
        │                   ^^^^^^
  > 220 │                     id="confirmPassword"
         ...
  > 226 │                     required
  > 227 │                   />
        │                   ^^
    228 │                   <button
    229 │                     type="button"
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(dashboard)\admin\company\page.tsx:110:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    108 │                     {t('company.name')}
    109 │                   </label>
  > 110 │                   <Input
        │                   ^^^^^^
  > 111 │                     id="company-name"
         ...
  > 119 │                     placeholder={t('company.companyName')}
  > 120 │                   />
        │                   ^^
    121 │                 </div>
    122 │ 
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(dashboard)\admin\company\page.tsx:130:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    128 │                     {t('company.siret')}
    129 │                   </label>
  > 130 │                   <Input
        │                   ^^^^^^
  > 131 │                     id="company-siret"
         ...
  > 139 │                     placeholder="12345678901234"
  > 140 │                   />
        │                   ^^
    141 │                 </div>
    142 │ 
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(dashboard)\admin\company\page.tsx:150:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    148 │                     {t('company.vat')}
    149 │                   </label>
  > 150 │                   <Input
        │                   ^^^^^^
  > 151 │                     id="company-vat"
         ...
  > 159 │                     placeholder="FR12345678901"
  > 160 │                   />
        │                   ^^
    161 │                 </div>
    162 │ 
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(dashboard)\admin\company\page.tsx:170:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    168 │                     {t('company.phone')}
    169 │                   </label>
  > 170 │                   <Input
        │                   ^^^^^^
  > 171 │                     id="company-phone"
         ...
  > 179 │                     placeholder="+33 1 23 45 67 89"
  > 180 │                   />
        │                   ^^
    181 │                 </div>
    182 │ 
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(dashboard)\admin\company\page.tsx:190:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    188 │                     {t('company.email')}
    189 │                   </label>
  > 190 │                   <Input
        │                   ^^^^^^
  > 191 │                     id="company-email"
         ...
  > 200 │                     placeholder="contact@entreprise.com"
  > 201 │                   />
        │                   ^^
    202 │                 </div>
    203 │ 
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(dashboard)\admin\company\page.tsx:211:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    209 │                     {t('company.website')}
    210 │                   </label>
  > 211 │                   <Input
        │                   ^^^^^^
  > 212 │                     id="company-website"
         ...
  > 221 │                     placeholder="https://entreprise.com"
  > 222 │                   />
        │                   ^^
    223 │                 </div>
    224 │               </div>
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(dashboard)\admin\company\page.tsx:237:19 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    235 │                     {t('company.address')}
    236 │                   </label>
  > 237 │                   <Input
        │                   ^^^^^^
  > 238 │                     id="company-address"
         ...
  > 246 │                     placeholder="123 Rue de l'Industrie"
  > 247 │                   />
        │                   ^^
    248 │                 </div>
    249 │ 
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(dashboard)\admin\company\page.tsx:258:21 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    256 │                       {t('company.city')}
    257 │                     </label>
  > 258 │                     <Input
        │                     ^^^^^^
  > 259 │                       id="company-city"
         ...
  > 267 │                       placeholder="Paris"
  > 268 │                     />
        │                     ^^
    269 │                   </div>
    270 │ 
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(dashboard)\admin\company\page.tsx:278:21 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    276 │                       {t('company.postalCode')}
    277 │                     </label>
  > 278 │                     <Input
        │                     ^^^^^^
  > 279 │                       id="company-postalCode"
         ...
  > 287 │                       placeholder="75001"
  > 288 │                     />
        │                     ^^
    289 │                   </div>
    290 │ 
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

src\app\(dashboard)\admin\company\page.tsx:298:21 lint/correctness/useUniqueElementIds ━━━━━━━━━━━━━

  × id attribute should not be a static string literal. Generate unique IDs using useId().
  
    296 │                       {t('company.country')}
    297 │                     </label>
  > 298 │                     <Input
        │                     ^^^^^^
  > 299 │                       id="company-country"
         ...
  > 307 │                       placeholder="France"
  > 308 │                     />
        │                     ^^
    309 │                   </div>
    310 │                 </div>
  
  i In React, if you hardcode IDs and use the component multiple times, it can lead to duplicate IDs in the DOM. Instead, generate unique IDs using useId().
  

The number of diagnostics exceeds the limit allowed. Use --max-diagnostics to increase it.
Diagnostics not shown: 1074.
Checked 542 files in 402ms. No fixes applied.
Found 346 errors.
Found 748 warnings.
check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks.
  

Continue malgre warnings

> @erp/web@1.0.0 build
> cross-env NODE_OPTIONS=--max-old-space-size=8192 NEXT_TELEMETRY_DISABLED=1 next build || echo 'Build completed with TypeScript warnings'

   ▲ Next.js 15.5.0
   - Environments: .env.local
   - Experiments (use with caution):
     · staleTimes
     ✓ optimizeCss
     ⨯ reactCompiler
     · webVitalsAttribution
     · optimizePackageImports
     ✓ memoryBasedWorkersCount

   Creating an optimized production build ...
