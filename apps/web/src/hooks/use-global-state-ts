import { create } from 'zustand'
import { persist } from 'zustand/middleware'

interface AppState {
  // UI State
  sidebarCollapsed: boolean
  theme: 'light' | 'dark' | 'system'
  
  // User preferences
  preferences: {
    dateFormat: string
    currency: string
    language: string
    notifications: {
      email: boolean
      push: boolean
      sound: boolean
    }
  }
  
  // Filters state
  filters: {
    projets: Record<string, any>
    stocks: Record<string, any>
    production: Record<string, any>
    facturation: Record<string, any>
  }
  
  // Actions
  setSidebarCollapsed: (collapsed: boolean) => void
  setTheme: (theme: 'light' | 'dark' | 'system') => void
  updatePreferences: (preferences: Partial<AppState['preferences']>) => void
  setFilters: (module: keyof AppState['filters'], filters: Record<string, any>) => void
  clearFilters: (module: keyof AppState['filters']) => void
}

export const useAppStore = create<AppState>()(
  persist(
    (set, get) => ({
      // Initial state
      sidebarCollapsed: false,
      theme: 'system',
      preferences: {
        dateFormat: 'DD/MM/YYYY',
        currency: 'EUR',
        language: 'fr',
        notifications: {
          email: true,
          push: true,
          sound: true
        }
      },
      filters: {
        projets: {},
        stocks: {},
        production: {},
        facturation: {}
      },
      
      // Actions
      setSidebarCollapsed: (collapsed) =>
        set({ sidebarCollapsed: collapsed }),
      
      setTheme: (theme) =>
        set({ theme }),
      
      updatePreferences: (newPreferences) =>
        set((state) => ({
          preferences: { ...state.preferences, ...newPreferences }
        })),
      
      setFilters: (module, filters) =>
        set((state) => ({
          filters: {
            ...state.filters,
            [module]: filters
          }
        })),
      
      clearFilters: (module) =>
        set((state) => ({
          filters: {
            ...state.filters,
            [module]: {}
          }
        }))
    }),
    {
      name: 'erp-app-state',
      partialize: (state) => ({
        theme: state.theme,
        preferences: state.preferences,
        sidebarCollapsed: state.sidebarCollapsed
      })
    }
  )
)

// Hook pour les préférences utilisateur
export const useUserPreferences = () => {
  const preferences = useAppStore(state => state.preferences)
  const updatePreferences = useAppStore(state => state.updatePreferences)
  
  return {
    preferences,
    updatePreferences
  }
}

// Hook pour l'état de l'interface
export const useUIState = () => {
  const sidebarCollapsed = useAppStore(state => state.sidebarCollapsed)
  const setSidebarCollapsed = useAppStore(state => state.setSidebarCollapsed)
  const theme = useAppStore(state => state.theme)
  const setTheme = useAppStore(state => state.setTheme)
  
  return {
    sidebarCollapsed,
    setSidebarCollapsed,
    theme,
    setTheme
  }
}

// Hook pour les filtres
export const useFilters = (module: keyof AppState['filters']) => {
  const filters = useAppStore(state => state.filters[module])
  const setFilters = useAppStore(state => state.setFilters)
  const clearFilters = useAppStore(state => state.clearFilters)
  
  return {
    filters,
    setFilters: (newFilters: Record<string, any>) => setFilters(module, newFilters),
    clearFilters: () => clearFilters(module)
  }
}