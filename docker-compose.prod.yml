# docker-compose.prod.yml - Configuration Production Proxmox
version: '3.8'

networks:
  topsteel_internal:
    driver: bridge
  traefik:
    external: true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

services:
  # ===============================
  # BASE DE DONNÃ‰ES
  # ===============================
  postgres:
    image: postgres:16-alpine
    container_name: topsteel_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: erp_topsteel
      POSTGRES_USER: ${DB_USERNAME:-topsteel}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    networks:
      - topsteel_internal
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-topsteel} -d erp_topsteel"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===============================
  # REDIS CACHE
  # ===============================
  redis:
    image: redis:7-alpine
    container_name: topsteel_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - topsteel_internal
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===============================
  # API BACKEND
  # ===============================
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: topsteel_api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://${DB_USERNAME:-topsteel}:${DB_PASSWORD}@postgres:5432/erp_topsteel
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: https://${DOMAIN:-topsteel.local}
      API_HOST: 0.0.0.0
    volumes:
      - uploads_data:/app/uploads
    networks:
      - topsteel_internal
      - traefik
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${DOMAIN:-topsteel.local}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=3002"

  # ===============================
  # FRONTEND WEB
  # ===============================
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: topsteel_web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3005
      NEXT_PUBLIC_API_URL: https://${DOMAIN:-topsteel.local}/api
      NEXT_PUBLIC_APP_URL: https://${DOMAIN:-topsteel.local}
      NEXT_PUBLIC_WS_URL: wss://${DOMAIN:-topsteel.local}/ws
      NEXTAUTH_URL: https://${DOMAIN:-topsteel.local}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    networks:
      - topsteel_internal
      - traefik
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${DOMAIN:-topsteel.local}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
      - "traefik.http.services.web.loadbalancer.server.port=3005"

  # ===============================
  # MARKETPLACE API
  # ===============================
  marketplace-api:
    build:
      context: .
      dockerfile: Dockerfile.marketplace-api
    container_name: topsteel_marketplace_api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3004
      DATABASE_URL: postgresql://${DB_USERNAME:-topsteel}:${DB_PASSWORD}@postgres:5432/erp_topsteel_marketplace
      ERP_DATABASE_URL: postgresql://${DB_USERNAME:-topsteel}:${DB_PASSWORD}@postgres:5432/erp_topsteel
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGINS: https://marketplace.${DOMAIN:-topsteel.local},https://${DOMAIN:-topsteel.local}
    networks:
      - topsteel_internal
      - traefik
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.marketplace-api.rule=Host(`marketplace.${DOMAIN:-topsteel.local}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.marketplace-api.entrypoints=websecure"
      - "traefik.http.routers.marketplace-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.marketplace-api.loadbalancer.server.port=3004"

  # ===============================
  # MARKETPLACE STOREFRONT
  # ===============================
  marketplace-storefront:
    build:
      context: .
      dockerfile: Dockerfile.marketplace-storefront
    container_name: topsteel_marketplace_storefront
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3007
      NEXT_PUBLIC_MARKETPLACE_API_URL: https://marketplace.${DOMAIN:-topsteel.local}/api
      NEXT_PUBLIC_MARKETPLACE_URL: https://marketplace.${DOMAIN:-topsteel.local}
      NEXT_PUBLIC_ERP_URL: https://${DOMAIN:-topsteel.local}
    networks:
      - topsteel_internal
      - traefik
    depends_on:
      - marketplace-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.marketplace.rule=Host(`marketplace.${DOMAIN:-topsteel.local}`)"
      - "traefik.http.routers.marketplace.entrypoints=websecure"
      - "traefik.http.routers.marketplace.tls.certresolver=letsencrypt"
      - "traefik.http.services.marketplace.loadbalancer.server.port=3007"

  # ===============================
  # REVERSE PROXY + SSL
  # ===============================
  traefik:
    image: traefik:v3.0
    container_name: topsteel_traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
      # Redirection HTTP vers HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-topsteel.local}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"

  # ===============================
  # MONITORING
  # ===============================
  portainer:
    image: portainer/portainer-ce:latest
    container_name: topsteel_portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN:-topsteel.local}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

volumes:
  portainer_data: